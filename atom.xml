<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[SanderZ's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-01-31T18:33:14.086Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[SanderZ]]></name>
    <email><![CDATA[375545592@qq.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[我做过的那些音乐类游戏——Jubeat与设计模式篇]]></title>
    <link href="http://yoursite.com/2015/01/29/Jubeat/"/>
    <id>http://yoursite.com/2015/01/29/Jubeat/</id>
    <published>2015-01-29T04:16:00.000Z</published>
    <updated>2015-01-31T16:00:43.740Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>这是本系列的第四篇文章，其他几篇见归档</p>
</blockquote>
<a id="more"></a>

<h1 id="Jubeat_与_Win8_触屏">Jubeat 与 Win8 触屏</h1>
<p>Jubeat (乐动魔方) 是一款街机的音乐类游戏。街机每次玩都要投币，平板等上面的移植版本又觉得屏幕太小，一直在想要是有个支持触屏的 PC 版本多好。</p>
<p>正好学校有大的触摸屏设备可以借我们开发使用，就试着自己用 Unity 将 Jubeat 移植到 PC 平台，用和实体的街机差不多大的触摸屏进行游戏。</p>
<p>演示视频如下：</p>
<embed width="675" height="400" type="application/x-shockwave-flash" src="http://www.56.com/flashApp/player_open.14.06.10.a.swf?vid=MTM0OTk2Mjcy" rel="external nofollow" wmode="transparent" invokeurls="false" allowfullscreen="true" allowscriptaccess="never" allownetworking="internal" flashvars="tgid=1030_qq-enuotxduoy&loading_deco_version=off&ban_ad=on&ban_top_panel=on&ban_share_btn=on&ban_over_panel=on">


<hr>
<p>然后总结一下开发过程中的一些要点和遇到的问题。</p>
<h2 id="一、设计模式的使用">一、设计模式的使用</h2>
<p>使用 Unity 的过程中，如何组织代码更加合理，一直是一个问题。初学设计模式，决定试着运用一下。</p>
<a id="more"></a>

<h3 id="1-_MVC_模式的使用">1. MVC 模式的使用</h3>
<p>虽然不少游戏的开发可能并不适合垂直的 MVC 模式，但对于音乐类游戏来说，我认为是适用的。</p>
<p>我使用 MVC 模式希望达到的目的是：当需要将游戏修改为另一种类型的音乐类游戏，或者改为支持多种音乐类游戏时，可以基本保持 Model 部分代码不变，只需要更换或者添加相应的 Controller 和 View 即可。</p>
<p>下面就结合我用 VS 生成的类图来讲一下我是怎么在 Jubeat 的开发中使用 MVC 模式的。</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/JubeatClassDiagram.png" alt="类图"></p>
<h3 id="2-_关于_Model：">2. 关于 Model：</h3>
<p>封装内容：包括了各种音乐类游戏共有的一些<strong>数据</strong>和<strong>游戏逻辑</strong>。<strong>数据</strong>如：分数、连击数、本局游戏的音乐、音乐播放的时间、Note的列表（谱面信息），等等。<strong>逻辑</strong>如：播放音乐、添加 Note 、判断精确度，等等。</p>
<p>上图中，<code>MugModel</code>、<code>AddNotesBehavior</code>和<code>JubeatAddBehavior</code>都属于 Model 部分。</p>
<h4 id="a-_配合使用的策略模式">a. 配合使用的策略模式</h4>
<p>考虑到 Model 中包含的游戏逻辑中有一部分会因为音乐游戏的玩法不同而不同，例如添加 Note 的部分和计分规则的部分。所以使用策略模式将这些会变化的部分单独封装起来，改变玩法时只需添加一个实现了对应接口的类即可。</p>
<p>从上图中可见，这里我只将添加 Note 部分封装了起来，写了一个接口<code>AddNotesBehavior</code>，并且在<code>JubeatAddBehavior</code>中实现了这个接口。</p>
<h4 id="b-_单例模式">b. 单例模式</h4>
<p>此外<code>SongData</code>类记录的是选中的歌曲的谱面信息，在选歌界面和游戏时（两个 Scene）都要用到它。我需要保证它的数据在两个Scene中是一样的。</p>
<p>为此，我试着使用单例模式，保证它只有一个实例。（在使用单例模式时遇到了一点问题，游戏对点击事件的响应变得很迟钝，此外一切正常。而在改成通过访问静态变量后就没有任何问题。暂时没有找到原因。）</p>
<h3 id="3-_关于_View_与观察者模式">3. 关于 View 与观察者模式</h3>
<p>封装内容：包括了各种 UI 界面元素的<strong>游戏对象</strong>和<strong>处理UI变化的逻辑</strong>。包括各种分数的 Lable 、控制 Combe 等的渐隐效果，控制背景动画随指定条件变化等等。</p>
<p>上图中的<code>JubeatView</code>就是这次 Jubeat 游戏使用的 View ，它实现了两个接口<code>ScoreObserver</code>和<code>ComboObserver</code>，这里通过观察者模式来完成 View 和 Model 间数据的同步。</p>
<h3 id="4-_关于_Controller">4. 关于 Controller</h3>
<p>上图中的<code>TapResponse</code>就是这次 Jubeat 使用的 Controller。它负责的任务：获取按键的触摸事件（或鼠标点击事件），并做出相应的响应，更改 Model 中对应的内容（Note 的状态、准确度的统计信息等等）。</p>
<h3 id="5-_Mecanim_动画系统与状态模式">5. Mecanim 动画系统与状态模式</h3>
<p>个人的理解来看，Mecanim 的状态机帮我们实现了状态模式。使用它可以很方便地将动画播放委托给 Unity 的动画系统来处理。不同的动画对应不同的状态，我只需要在 Model 中更新相应的条件即可。然后 Unity 的动画系统会自动根据条件的变化完成状态的切换，即切换不同的动画。</p>
<p>通过上述的方式，尽量使脚本间的关系接近右图的情况。避免了左图中情况的出现（会导致代码难以维护、修改）。</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/ClassArrange.jpg" alt="架构"></p>
<h2 id="二、使用_WWW_类在运行时载入本地的资源">二、使用 WWW 类在运行时载入本地的资源</h2>
<h3 id="1-_读取歌曲信息以及在选歌界面的歌曲预览">1. 读取歌曲信息以及在选歌界面的歌曲预览</h3>
<p>这一次我选择使用国人制作的Jubeat的安卓移植版本 Andjuist 的谱面文件。大致格式如下：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/BeatmapStructure.jpg" alt="谱面结构"></p>
<p>首先我利用 C# 自带的 IO 类写了一个用于读取文本文件的工具类<code>FileReader</code>，代码如下：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> FileReader{</div><div class="line"></div><div class="line">    <span class="comment">//打开文本文件，逐行读出，并返回一个ArrayList</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList <span class="title">LoadFile</span>(<span class="keyword">string</span> path, <span class="keyword">string</span> name)</div><div class="line">    {</div><div class="line">        StreamReader sr = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span></div><div class="line">        {</div><div class="line">            Debug.Log(path);</div><div class="line">            sr = File.OpenText(path + <span class="string">"//"</span> + name);</div><div class="line">            Debug.Log(<span class="string">"opened"</span>);</div><div class="line">        }</div><div class="line">        <span class="keyword">catch</span> (Exception e)</div><div class="line">        {</div><div class="line">            Debug.Log(<span class="string">"failed"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">string</span> line;</div><div class="line"></div><div class="line">        ArrayList arrlist = <span class="keyword">new</span> ArrayList();</div><div class="line">        <span class="keyword">while</span> ((line = sr.ReadLine()) != <span class="keyword">null</span>)</div><div class="line">        {</div><div class="line">            arrlist.Add(line);</div><div class="line">        }</div><div class="line"></div><div class="line">        sr.Close();</div><div class="line"></div><div class="line">        sr.Dispose();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> arrlist;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>谱面的信息包括：</p>
<ol>
<li>歌曲封面（图片文件）</li>
<li>歌曲信息（如曲名、作者等，文本文件）</li>
<li>歌曲（音频文件）</li>
<li>谱面（文本文件）。</li>
</ol>
<p>在选歌界面时，首要的是要读取第一个和第二个信息，考虑到要实现在选歌界面对歌曲的试听，所以也要读取第三个信息。第四个信息可以在选定歌曲进入游戏时进行读取。</p>
<p>读取前三个时，首先。利用 <code>Application.dataPath</code> 获取到游戏当前所在的目录（输出得到的是带盘符的绝对路径）。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">string</span> songsPath;</div><div class="line">songsPath = Application.dataPath + <span class="string">"/songs"</span>;</div></pre></td></tr></table></figure>

<p>然后就可以利用 WWW 类来进行读取了，它的方便之处在于它可以直接将读取到的音频文件变为 <code>AudioClip</code> ，将图片文件变为 <code>Texture</code>。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//读磁盘文件，载入并生成选歌列表</span></div><div class="line">IEnumerator LoadAllSongs()</div><div class="line">{</div><div class="line">    <span class="comment">//利用 C# 的 Directory 类，获取当前目录下所有歌曲的目录</span></div><div class="line">    <span class="keyword">string</span>[] songs = Directory.GetDirectories(songsPath);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; songs.Length; ++i)</div><div class="line">    {</div><div class="line">        <span class="comment">//从磁盘载入音频文件</span></div><div class="line">        <span class="keyword">string</span> songNamePath = songs[i].Replace(<span class="string">"\\"</span>,<span class="string">"/"</span>);</div><div class="line">        <span class="keyword">string</span> musicURL = <span class="string">"file:///"</span> + songNamePath + <span class="string">"/song.ogg"</span>;</div><div class="line">        WWW www = <span class="keyword">new</span> WWW(musicURL);</div><div class="line">        AudioClip clip = www.audioClip;</div><div class="line">        <span class="keyword">while</span> (!clip.isReadyToPlay)</div><div class="line">        {</div><div class="line">            <span class="comment">//Debug.Log(www.isDone);</span></div><div class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> www; </div><div class="line">        }</div><div class="line">        <span class="comment">//Debug.Log("compelete");</span></div><div class="line"></div><div class="line">        <span class="comment">//从磁盘载入对应专辑封面</span></div><div class="line">        <span class="keyword">string</span> picURL = <span class="string">"file:///"</span> + songNamePath + <span class="string">"/pic.jpg"</span>;</div><div class="line">        WWW wwwPic = <span class="keyword">new</span> WWW(picURL);</div><div class="line">        Texture picture = wwwPic.texture;</div><div class="line">        <span class="comment">//Debug.Log(wwwPic.isDone);</span></div><div class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> wwwPic;</div><div class="line">        <span class="comment">//Debug.Log("compelete");</span></div><div class="line"></div><div class="line">        <span class="comment">//从磁盘载入歌曲信息</span></div><div class="line">        ArrayList songInfo = FileReader.LoadFile(songs[i], <span class="string">"manifest.txt"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//......至此已读取到需要的信息，处理并利用信息生成选歌列表中的标签部分省略......</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="2-_与使用_Resources_的比较">2. 与使用 Resources 的比较</h3>
<p>我希望实现的效果是：玩家可以向指定的文件夹中任意增加或删除谱面，然后在游戏中刷新（或重启游戏），就可以在游戏中看到变化。</p>
<p>之前使用 Resources 来实现，就存在一个资源打包的问题，打不到这样的效果。而使用 WWW 类则不需要对资源进行打包，可以及时反映指定目录下文件的变化。</p>
<h3 id="3-_存在的问题及反思">3. 存在的问题及反思</h3>
<p>在上面的实现中，我一次性将所有的音频文件都读取了进来，这样就会<strong>导致歌曲较多时进入选歌界面载入很慢</strong>。更好的办法是当选中一首歌时，再将它的音频文件读取进来，虽然这样会使在选歌界面预览时有一个延迟，但并不明显。</p>
<h2 id="三、NGUI的使用">三、NGUI的使用</h2>
<h3 id="1-_制作选歌界面">1. 制作选歌界面</h3>
<p>效果可见上面的视频，再放一张效果图：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/JubeatSongList.jpg" alt="选歌界面"></p>
<h4 id="a-_ScrollView_的使用">a. ScrollView 的使用</h4>
<p>首先在场景中搭好基本的框架。网上教程很多，也可以在自带的例子的基础上进行修改，在此不再赘述。搭好以后的结构如图：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/scrollview1.jpg" alt="选歌界面"></p>
<p>然后对 ScrollView 进行一些设置：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/scrollview2.jpg" alt="选歌界面"></p>
<p>接着给 Grid 添加 UIGrid 脚本，并设置为纵向。</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/scrollview3.jpg" alt="选歌界面"></p>
<p><strong>UIGrid 会将它的子物体按设置自动进行排序。这样我们只需要考虑如何为 UIGrid 添加子物体，而不需要考虑为添加的子物体排序的具体实现。</strong>可以很方便地实现一个竖排的选歌列表。</p>
<p>这里，我将每个谱面对应的标签作为子物体。就是下图这个：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/JubeatSongListItem.jpg" alt="选歌界面"></p>
<p>在添加之前，我们先制作一个这样的标签，并将它做成一个Prefab，如下图：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/scrollview5.jpg" alt="选歌界面"></p>
<p>这样，生成选歌列表时就可以根据读到的歌曲的数量，生成相应数量的标签，而且可以通过程序给每个标签的内容做修改。</p>
<p>此外，在将标签做成 Prefab 之前，需要为它添加按键相关的组件，然后添加一个获取当前标签信息并跳转至游戏界面的脚本。这样就可以保证点击每个项后都可以选择对应的歌曲进入游戏。</p>
<h4 id="b-_通过脚本进行控制">b. 通过脚本进行控制</h4>
<p>现在准备工作已经完成，可以添加对应的脚本进行控制了。</p>
<p>首先，我先定义了一个类<code>SongListItem</code>，来描述选歌列表中每个标签，每个标签都会被抽象为这个类的一个对象，对象的属性值对应着标签上的内容。代码如下：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> SongListItem</div><div class="line">{</div><div class="line">    <span class="keyword">private</span> <span class="keyword">string</span> path;            <span class="comment">//当前项对应路径</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">string</span> songName;        <span class="comment">//当前项对应曲名</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">string</span> composer;        <span class="comment">//作者</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> BPM;             </div><div class="line">    <span class="keyword">private</span> <span class="keyword">string</span> <span class="keyword">from</span>;            <span class="comment">//来源</span></div><div class="line">    <span class="keyword">private</span> AudioClip music;        <span class="comment">//对应音频文件</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] levels;           <span class="comment">//</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> level;              <span class="comment">//当前曲难度</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">string</span> levelString;     </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;                 <span class="comment">//当前是第几首歌</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">bool</span> isSelected;        <span class="comment">//当前项是否被选中</span></div><div class="line">    <span class="keyword">private</span> Texture picture;        <span class="comment">//当前项对应专辑封面</span></div><div class="line"></div><div class="line">    <span class="comment">//构造函数，初始化各项值</span></div><div class="line">    <span class="keyword">public</span> <span class="title">SongListItem</span>(<span class="keyword">string</span> path, <span class="keyword">string</span> songName, <span class="keyword">string</span> composer, <span class="keyword">float</span> BPM, <span class="keyword">string</span> <span class="keyword">from</span>, AudioClip music, <span class="keyword">int</span> level, <span class="keyword">string</span> levelString, <span class="keyword">int</span> id, <span class="keyword">bool</span> isSelected, Texture picture)</div><div class="line">    {</div><div class="line">        <span class="keyword">this</span>.path = path;</div><div class="line">        <span class="keyword">this</span>.songName = songName;</div><div class="line">        <span class="keyword">this</span>.composer = composer;</div><div class="line">        <span class="keyword">this</span>.BPM = BPM;</div><div class="line">        <span class="keyword">this</span>.<span class="keyword">from</span> = <span class="keyword">from</span>;</div><div class="line">        <span class="keyword">this</span>.music = music;</div><div class="line">        <span class="keyword">this</span>.level = level;</div><div class="line">        <span class="keyword">this</span>.levelString = levelString;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.isSelected = isSelected;</div><div class="line">        <span class="keyword">this</span>.picture = picture;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="xmlDocTag">///</span> 相应属性的get、set方法，下略</span></div><div class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;returns&gt;</span><span class="xmlDocTag">&lt;/returns&gt;</span></span></div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<p>然后我需要将每一个对象都按生成顺序存储下来，这样我才能从程序中获得是哪一项被选中了。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;SongListItem&gt; songItems;</div></pre></td></tr></table></figure>

<p>刚刚已经从磁盘上获取到了生成选歌列表所需的信息，接下来就补上刚刚省略的部分，利用这些信息创建选歌列表。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//从磁盘载入歌曲信息</span></div><div class="line">ArrayList songInfo = FileReader.LoadFile(songs[i], <span class="string">"manifest.txt"</span>);</div><div class="line"><span class="keyword">if</span> (songInfo.Count &gt; <span class="number">0</span>)</div><div class="line">{</div><div class="line">    <span class="comment">//对从文本文件读取到的信息进行字符串操作，提取出需要的内容</span></div><div class="line">    <span class="keyword">string</span> path = songs[i];</div><div class="line">    <span class="keyword">string</span> songName = songInfo[<span class="number">2</span>].ToString().Substring(<span class="number">5</span>, songInfo[<span class="number">2</span>].ToString().Length-<span class="number">5</span>);</div><div class="line">    <span class="keyword">string</span> composer = songInfo[<span class="number">3</span>].ToString().Substring(<span class="number">9</span>, songInfo[<span class="number">3</span>].ToString().Length-<span class="number">9</span>);</div><div class="line">    <span class="keyword">float</span> BPM = <span class="keyword">float</span>.Parse(songInfo[<span class="number">4</span>].ToString().Substring(<span class="number">4</span>, songInfo[<span class="number">4</span>].ToString().Length-<span class="number">4</span>));</div><div class="line">    <span class="keyword">string</span> <span class="keyword">from</span> = songInfo[<span class="number">5</span>].ToString().Substring(<span class="number">5</span>, songInfo[<span class="number">5</span>].ToString().Length-<span class="number">5</span>);</div><div class="line">    <span class="keyword">string</span>[] levelString = songInfo[<span class="number">6</span>].ToString().Substring(<span class="number">6</span>, songInfo[<span class="number">6</span>].ToString().Length - <span class="number">6</span>).Split(<span class="string">','</span>);</div><div class="line">    <span class="keyword">int</span>[] levels = { <span class="keyword">int</span>.Parse(levelString[<span class="number">0</span>]), <span class="keyword">int</span>.Parse(levelString[<span class="number">1</span>]), <span class="keyword">int</span>.Parse(levelString[<span class="number">2</span>]) };</div><div class="line"></div><div class="line">    AudioClip music = clip;</div><div class="line"></div><div class="line">    <span class="comment">//为同一首歌的每个难度都创建一个标签</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j)</div><div class="line">    {</div><div class="line">        <span class="keyword">string</span> levelStr = <span class="string">"BASIC"</span>;</div><div class="line">        <span class="keyword">switch</span> (j)</div><div class="line">        {</div><div class="line">            <span class="keyword">case</span> <span class="number">0</span>: levelStr = <span class="string">"BASIC"</span>; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>: levelStr = <span class="string">"ADVANCED"</span>; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>: levelStr = <span class="string">"EXTREME"</span>; <span class="keyword">break</span>;</div><div class="line">        }</div><div class="line">		<span class="comment">//新建一个标签对象，修改对应的内容后加入到列表中</span></div><div class="line">        SongListItem item = <span class="keyword">new</span> SongListItem(path, songName, composer, BPM, <span class="keyword">from</span>, music, levels[j], levelStr, i, <span class="keyword">false</span>, picture);</div><div class="line">        songItems.Add(item);</div><div class="line">        <span class="comment">//根据 Prefab 实例化标签对象，修改对应的内容后放入场景中。</span></div><div class="line">        InitiateSongListItem(item);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="c-_中间大两头小的效果的实现">c. 中间大两头小的效果的实现</h4>
<p>为了画面效果的美观，我实现了一个在滚动过程中保持两头的标签小，中间的标签大的效果。</p>
<p>实现方法大致如下。为 Prefab 添加一个对应的脚本。这个脚本会根据当前标签的 y 坐标来对当前标签进行缩放。</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/scrollview6.jpg" alt="选歌界面"></p>
<p>关键的代码如下：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span> currentScale = <span class="number">1</span> - Mathf.Abs(<span class="keyword">this</span>.transform.position.y) / <span class="number">2.0</span>f;</div><div class="line"><span class="keyword">this</span>.transform.localScale = <span class="keyword">new</span> Vector3(currentScale, currentScale, currentScale);</div></pre></td></tr></table></figure>

<h3 id="2-_在游戏主界面中的应用">2. 在游戏主界面中的应用</h3>
<p>效果图：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/JubeatGamePlay.jpg" alt="游戏界面"></p>
<p>其中，歌曲封面、曲名等文字信息、Combo 数、以及暂停和返回按键都使用了 NGUI。</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/JubeatGamePlay1.jpg" alt="游戏界面"></p>
<h2 id="四、使用插件_TouchScript_支持_Win8_的多点触屏输入">四、使用插件 TouchScript 支持 Win8 的多点触屏输入</h2>
<p>使用原型测试时的效果:</p>
<embed width="675" height="400" type="application/x-shockwave-flash" src="http://www.56.com/flashApp/player_open.14.06.10.a.swf?vid=MTM0OTkwODQ1" rel="external nofollow" wmode="transparent" invokeurls="false" allowfullscreen="true" allowscriptaccess="never" allownetworking="internal" flashvars="tgid=1030_qq-enuotxduoy&loading_deco_version=off&ban_ad=on&ban_top_panel=on&ban_share_btn=on&ban_over_panel=on">

<h3 id="1-_TouchScript_的使用">1. TouchScript 的使用</h3>
<p>因为 PC 的多点的触屏设备使用的 TUIO 协议，不能使用 Unity 的 Input 来处理，后来我找到了 TouchScript 插件。TouchScript 是一款开源的插件。详情见它的官网 <a href="touchScript.github.io">touchScript.github.io</a>。</p>
<h4 id="a-_TouchScript_的一些基本概念">a. TouchScript 的一些基本概念</h4>
<ol>
<li>Input Sources （输入源）：用于获得不同类型触屏的输入，包括<code>MouseInput</code>、<code>MobileInput</code>、<code>TUIOInput</code>、<code>Win7TouchInput</code>和<code>Win8TouchInput</code>。</li>
<li>Layers （层）：层是 TouchScript 中一个重要的概念。当从 Input Sources 中获取到触摸输入后，TouchScript 需要确定这个触摸事件是否点在了场景中的任意物体上。TouchScript 通过一系列排好序的层来完成这件事。比如，用 CameraLayer2D 处理有着 2D 碰撞盒的 2D 物体。</li>
<li>Touch Manager （触摸管理）：通过 Touch Manager 我们可以指定场景中哪些层（TouchScript中的层）可以接受触摸输入。</li>
<li>Gestures （手势）：手势包含了一系列的组件，添加了这些组件的游戏对象就可以响应相应的的手势。包括<code>Pan Gesture</code>（按住平移）、<code>Press Gesture</code>（按下）、<code>Release Gesture</code>（放开）、<code>LongPress Gesture</code>（长按）、<code>Flick Gesture</code>（快速轻击）几种。</li>
</ol>
<h4 id="b-_在场景中的一些准备工作">b. 在场景中的一些准备工作</h4>
<p>为了在场景中使用 TouchScript，在导入插件后</p>
<ul>
<li>首先我们需要在场景中创建一个空物体，命名为<code>TouchScript</code>。然后为它添加组件<code>TouchManager</code>。</li>
<li>接着我们在<code>TouchScript</code>下创建一个子物体，为它添加我们组件<code>Mouse Input</code>和<code>win 8Touch Input</code>（你需要哪些输入源就增加哪些，具体可见官网 wiki）</li>
<li>为了方便调试，从插件的 Prefab 目录下找到 <code>Touch Debugger</code>，将它加入场景中</li>
</ul>
<p>如下图所示：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/touch1.jpg" alt="触控"></p>
<p>完成这些工作以后，就可以先 Build 一次，测试是否配置正确，可以支持多点触控了。</p>
<h4 id="c-_Gesture_的使用">c. Gesture 的使用</h4>
<p>接下来为需要相应触屏事件的游戏对象添加相应的 Gesture （手势），如下图：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/touch2.jpg" alt="触控"></p>
<p>对应的关键代码如下：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> TapResponse : MonoBehaviour {</div><div class="line"></div><div class="line">    <span class="comment">//....成员变量，略......</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</div><div class="line">    {</div><div class="line">        <span class="comment">//初始化成员变量部分略，此处添加对触屏事件的响应</span></div><div class="line">        <span class="keyword">this</span>.gameObject.GetComponent&lt;PressGesture&gt;().Pressed += tappedHandler;</div><div class="line">        <span class="keyword">this</span>.gameObject.GetComponent&lt;ReleaseGesture&gt;().Released += releaseHandler;</div><div class="line">        <span class="keyword">this</span>.gameObject.GetComponent&lt;SimplePanGesture&gt;().StateChanged += panHandler;</div><div class="line"></div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisable</span>()</div><div class="line">    {</div><div class="line">        <span class="comment">//销毁时移除对触屏事件的响应</span></div><div class="line">        GetComponent&lt;PressGesture&gt;().Pressed -= tappedHandler;</div><div class="line">        GetComponent&lt;ReleaseGesture&gt;().Released -= releaseHandler;</div><div class="line">        <span class="keyword">this</span>.gameObject.GetComponent&lt;SimplePanGesture&gt;().StateChanged -= panHandler;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">//按下时平移</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">panHandler</span>(<span class="keyword">object</span> sender, GestureStateChangeEventArgs e)</div><div class="line">    {</div><div class="line">        <span class="comment">//......内容略，见下文......</span></div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tappedHandler</span>(<span class="keyword">object</span> sender, EventArgs e)</div><div class="line">    {</div><div class="line">        onTapDown();</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">releaseHandler</span>(<span class="keyword">object</span> sender, EventArgs e)</div><div class="line">    {</div><div class="line">        onTapUp();</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">//........下略......</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>TouchScript 基于手势的做法虽然方便，但是对我来说却造成了一定的麻烦。因为它的手势是与游戏对象绑定的，<strong>每个游戏对象单独响应作用在它上的手势事件</strong>。</p>
<p>而由于在 Jubeat 中，我使用 Prefab 将 16 个按键实例化出来，它们都是相互独立的游戏对象。当我按住一个按键 A 不放，然后移动到下一个按键 B 的位置上，响应的仍然是按键 A 的手势事件，而不是我要的触发按键 B 的手势事件。</p>
<h3 id="2-_关于射线">2. 关于射线</h3>
<p>为了解决刚刚提到的问题，我不得不将每个触摸的点的位置获取出来后，重新利用 Unity 中的射线检测是否移动到了别的按键的位置上，并将那个按键获取出来，然后调用其中对应的方法来实现点击。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">panHandler</span>(<span class="keyword">object</span> sender, GestureStateChangeEventArgs e)</div><div class="line">{</div><div class="line">    <span class="comment">//从 TouchScript 的手势中获取当前触摸到的点的位置</span></div><div class="line">    <span class="keyword">var</span> gesture = sender <span class="keyword">as</span> SimplePanGesture;</div><div class="line">    ITouchHit Ihit;</div><div class="line">    gesture.GetTargetHitResult(<span class="keyword">out</span> Ihit);</div><div class="line">    <span class="keyword">var</span> hit2d = Ihit <span class="keyword">as</span> ITouchHit2D;</div><div class="line">    <span class="keyword">if</span> (hit2d == <span class="keyword">null</span>)</div><div class="line">    {</div><div class="line">        previousTapbox.GetComponent&lt;TapResponse&gt;().onTapUp();</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">//从触摸到的点的位置发出一条射线</span></div><div class="line">    RaycastHit2D hit = Physics2D.Raycast(hit2d.Point, Vector2.zero);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (hit != <span class="keyword">null</span> && hit.collider != <span class="keyword">null</span>)</div><div class="line">    {</div><div class="line">		<span class="comment">//获取当前触摸到的点实际在哪个按键上，并将那个按键设为按下，松开当前按键</span></div><div class="line">        currentTapbox = hit.transform.gameObject;</div><div class="line">        <span class="keyword">if</span> (currentTapbox != previousTapbox)</div><div class="line">        {</div><div class="line"></div><div class="line">            previousTapbox.GetComponent&lt;TapResponse&gt;().onTapUp();</div><div class="line">            currentTapbox.GetComponent&lt;TapResponse&gt;().onTapDown();</div><div class="line">        }</div><div class="line">        previousTapbox = currentTapbox;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="TouchScript_与_NGUI_的冲突问题及其解决">TouchScript 与 NGUI 的冲突问题及其解决</h3>
<p>使用过程中还遇到了 TouchScript 与 NGUI 产生冲突导致 NGUI 的按键等不能正常响应的问题。</p>
<p>解决方法见<a href="https://github.com/TouchScript/TouchScript/issues/6" target="_blank" rel="external">https://github.com/TouchScript/TouchScript/issues/6</a></p>
<h2 id="五、Unity_Native_2D_的使用">五、Unity Native 2D 的使用</h2>
<p>这一次改用 Unity 原生的 2D 系统，感觉与使用 2D Toolkit 时感觉差不多，区别是不需要建立精灵集以后才能创建精灵。</p>
<p>遇到一个问题就是Unity 原生 2D 的 Sorting Layer 和 NGUI 的 Widget 的 Depth 属性有有冲突，层的前后关系会有问题。</p>
<h2 id="六、使用_Mecanim_动画系统控制动画">六、使用 Mecanim 动画系统控制动画</h2>
<h3 id="Note_根据不同的判定结果显示不同的动画">Note 根据不同的判定结果显示不同的动画</h3>
<p>如图</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/Anim1.jpg" alt="动画"></p>
<h3 id="背景动画根据指定条件改变">背景动画根据指定条件改变</h3>
<p>在 Jubeat 原版游戏的规则中，打完曲子最多有 900000 分，此外根据“连续不失误”的数量会得到一个 0~1的系数，然后用这个系数乘以100000，得到额外的加分，两者相加得到总分。</p>
<p>游戏过程中背景动画像从中间逐渐散开的云，慢慢露出底下的内容。而这个背景动画展开的程度，就表示当前加分的系数。系数为1时，完全展开，系数为0时，完全闭合。</p>
<p>这个系数游戏过程中一直在变化，打出 perfect 或 good，这个系数会增大，反之则会减小。相应的，背景动画展开的程度也会跟着变化。</p>
<p>为了实现这个功能，我将背景从完全闭合到完全展开的动画分成了10段，每段循环播放，对应加分系数 0~0.1 ， 0.1~0.2 等十个区间。如图：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/Anim2.jpg" alt="动画"></p>
<p>此外，结束后，还要有一个评级的动画，因为也属于背景动画。也做在了一起。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>这是本系列的第四篇文章，其他几篇见归档</p>
</blockquote>
<!-- more -->

<h1 id="Jubeat_与_Win8_触屏">Jubeat 与 Win8 触屏</h1>
<p>Jubeat (乐动魔方) 是一款街机的音乐类游戏。街机每次玩都要投币，平板等上面的移植版本又觉得屏幕太小，一直在想要是有个支持触屏的 PC 版本多好。</p>
<p>正好学校有大的触摸屏设备可以借我们开发使用，就试着自己用 Unity 将 Jubeat 移植到 PC 平台，用和实体的街机差不多大的触摸屏进行游戏。</p>
<p>演示视频如下：</p>
<embed width="675" height="400" type="application/x-shockwave-flash" src="http://www.56.com/flashApp/player_open.14.06.10.a.swf?vid=MTM0OTk2Mjcy" rel="external nofollow" wmode="transparent" invokeurls="false" allowfullscreen="true" allowscriptaccess="never" allownetworking="internal" flashvars="tgid=1030_qq-enuotxduoy&loading_deco_version=off&ban_ad=on&ban_top_panel=on&ban_share_btn=on&ban_over_panel=on">


<hr>
<p>然后总结一下开发过程中的一些要点和遇到的问题。</p>
<h2 id="一、设计模式的使用">一、设计模式的使用</h2>
<p>使用 Unity 的过程中，如何组织代码更加合理，一直是一个问题。初学设计模式，决定试着运用一下。</p>
]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[偶尔也客串一回美术设计]]></title>
    <link href="http://yoursite.com/2015/01/28/Artist/"/>
    <id>http://yoursite.com/2015/01/28/Artist/</id>
    <published>2015-01-28T05:49:38.000Z</published>
    <updated>2015-01-31T15:27:08.993Z</updated>
    <content type="html"><![CDATA[<a id="more"></a>

<p> 小组作业，要求制作一款严肃教育类游戏。因为小组里只有我受过一些美术训练，所以就在分工时将美术的任务交给了我。（程序部分由另外的组员负责，我并未参与）</p>
<h1 id="化学达人">化学达人</h1>
<h2 id="游戏的效果">游戏的效果</h2>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/px1.jpg" alt="效果图1"></p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/px2.jpg" alt="效果图2"></p>
<p>以下是一段演示视频：</p>
<embed width="675" height="400" type="application/x-shockwave-flash" src="http://www.56.com/flashApp/player_open.14.06.10.a.swf?vid=MTM0OTYzMzMw" rel="external nofollow" wmode="transparent" invokeurls="false" allowfullscreen="true" allowscriptaccess="never" allownetworking="internal" flashvars="tgid=1030_qq-enuotxduoy&loading_deco_version=off&ban_ad=on&ban_top_panel=on&ban_share_btn=on&ban_over_panel=on">

<a id="more"></a>

<h2 id="游戏的构思">游戏的构思</h2>
<p>我们的希望是制作一个化学版的“24点”。给出相应的条件后，然后两名玩家比谁选择的化合物更符合给出的条件。为了增强竞技性，游戏采用了抢夺先手，然后回合制的规则。两名玩家轮流取所需化合物，当两人都拿到指定数量的化合物后，本轮游戏结束。</p>
<p>虽然这个作品有一定教育作用。但不得不承认，这个作品作为游戏而言娱乐性较差。</p>
<h1 id="起先的设计——荒野求生">起先的设计——荒野求生</h1>
<p>其实最开始，我们是希望制作一款以“荒野求生”为主题的严肃教育类游戏。让玩家通过自己的智慧和一定的引导帮助主角在荒漠中存活，在这个过程中学会荒漠求生的技巧。但最后因为各方面的原因，这个方案被放弃了。</p>
<embed width="675" height="400" type="application/x-shockwave-flash" src="http://www.56.com/flashApp/player_open.14.06.10.a.swf?vid=MTM0OTY3MDMy" rel="external nofollow" wmode="transparent" invokeurls="false" allowfullscreen="true" allowscriptaccess="never" allownetworking="internal" flashvars="tgid=1030_qq-enuotxduoy&loading_deco_version=off&ban_ad=on&ban_top_panel=on&ban_share_btn=on&ban_over_panel=on">

<p>一些场景的设定：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/s1_setting.jpg" alt="效果图1"></p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/s4_setting1.jpg" alt="效果图2"></p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/s5_setting.jpg" alt="效果图3"></p>
]]></content>
    <summary type="html">
    <![CDATA[<!-- more -->

<p> 小组作业，要求制作一款严肃教育类游戏。因为小组里只有我受过一些美术训练，所以就在分工时将美术的任务交给了我。（程序部分由另外的组员负责，我并未参与）</p>
<h1 id="化学达人">化学达人</h1>
<h2 id="游戏的效果">游戏的效果</h2>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/px1.jpg" alt="效果图1"></p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/px2.jpg" alt="效果图2"></p>
<p>以下是一段演示视频：</p>
<embed width="675" height="400" type="application/x-shockwave-flash" src="http://www.56.com/flashApp/player_open.14.06.10.a.swf?vid=MTM0OTYzMzMw" rel="external nofollow" wmode="transparent" invokeurls="false" allowfullscreen="true" allowscriptaccess="never" allownetworking="internal" flashvars="tgid=1030_qq-enuotxduoy&loading_deco_version=off&ban_ad=on&ban_top_panel=on&ban_share_btn=on&ban_over_panel=on">

]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 OpenGL 进行多光源场景绘制]]></title>
    <link href="http://yoursite.com/2015/01/27/OpenGL/"/>
    <id>http://yoursite.com/2015/01/27/OpenGL/</id>
    <published>2015-01-27T09:06:27.000Z</published>
    <updated>2015-01-31T15:21:17.922Z</updated>
    <content type="html"><![CDATA[<a id="more"></a>

<h1 id="基于_OpenGL_的多光源场景绘制">基于 OpenGL 的多光源场景绘制</h1>
<p>通过使用 OpenGL 图形库，实现一个简单的，具有多个光源，且可以支持鼠标控制模型 360 度旋转，键盘控制多个光源位置，并且能够从外部<code>OBJ</code>文件中读入模型的三维场景绘制程序。</p>
<p>效果如下：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/opengl_image4.jpeg" alt="效果图1"></p>
<a id="more"></a>

<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/opengl_image5.jpeg" alt="效果图2"></p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/opengl_image6.jpeg" alt="效果图3"></p>
<p> 视频演示：</p>
<embed width="675" height="400" type="application/x-shockwave-flash" src="http://www.56.com/flashApp/player_open.14.06.10.a.swf?vid=MTM0OTY5NTM1" rel="external nofollow" wmode="transparent" invokeurls="false" allowfullscreen="true" allowscriptaccess="never" allownetworking="internal" flashvars="tgid=1030_qq-enuotxduoy&loading_deco_version=off&ban_ad=on&ban_top_panel=on&ban_share_btn=on&ban_over_panel=on">

<h2 id="1_OpenGL">1 OpenGL</h2>
<p>OpenGL 是个跨平台的专业的图形程序接口，是一个功能强大，调用方便的底层图形库。它被广泛地应用于三维图形设计的各个领域，例如三维游戏、虚拟现实技术、三维图形与动画绘制、和计算机可视化等等。在三维图形设计中，三维场景和物体的绘制以及光照效果的表现是其中非常重要的两个问题。利用 OpenGL 可以较为简便地解决上述两个问题。</p>
<h2 id="2_三维场景的绘制与观察">2 三维场景的绘制与观察</h2>
<h3 id="2-1_OpenGL_中的观察变换">2.1 OpenGL 中的观察变换</h3>
<p>在 OpenGL 中，三维图形的绘制与观察需要经过视点变换、模型变换、投影变换、视口变换几个步骤。经历以上几步后，三维物体就可以在计算机的显示器上以二维的形式表现出来。这个过程可以类比为相机拍照。</p>
<ul>
<li>第一步：<strong>视点变换</strong>，可以类比为确定相机位置，让相机对准三维物体；</li>
<li>第二步：<strong>模型变换</strong>，即将三维物体放在场景中适当的位置；</li>
<li>第三步：<strong>投影变换</strong>，可以类比为将三维物体投影在胶片上；</li>
<li>第四步：<strong>视口变换</strong>，确定裁剪窗口的尺寸<h4 id="2-1-1_模型变换和视图变换">2.1.1 模型变换和视图变换</h4>
在观察一个三维物体时，移动物体或者移动观察点都能使观察点与三维物体之间的相对位置发生变化，这种相对位置关系决定了观察的效果。</li>
</ul>
<p>在 OpenGL 中，模型和观察点的变换都能够通过矩阵运算来实现。在进行变换前，需先设置当前操作的矩阵为模型视图矩阵，像这样：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">glMatrixMode(GL_MODELVIEW);</div></pre></td></tr></table></figure>

<p>通常，在进行变换前，还需要把指定的当前操作的矩阵设置为单位矩阵，这需要一个函数： <code>glLoadIdentity()</code></p>
<p>然后，就可以进行模型变换和视图变换了。进行模型和视图变换，主要涉及到三个几何变换函数：</p>
<ol>
<li><code>glTranslate*</code>，把当前矩阵和一个用于移动物体的矩阵相乘。后者的三个参数分别表示了在三个坐标上的位移值。</li>
<li><code>glRotate*</code>，把当前矩阵和一个用于旋转物体的矩阵相乘。物体将绕着(0,0,0)到(x,y,z)的直线以逆时针旋转，参数<code>angle</code>表示旋转的角度。</li>
<li><code>glScale*</code>，把当前矩阵和一个用于缩放物体的矩阵相乘。x,y,z 分别表示在该方向上的缩放比例。</li>
</ol>
<h4 id="2-1-2_投影变换和视区变换">2.1.2 投影变换和视区变换</h4>
<p>投影变换的作用是将三维的观察坐标系中的对象投影到二维的显示平面中。在确定进行投影变换之前，需要指当前操作的矩阵为投影矩阵，并将其设置为单位矩阵，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">glMatrixMode(GL_PROJECTION);</div><div class="line">glLoadIdentity();</div></pre></td></tr></table></figure>

<p>然后再确定投影方式进行投影变换。OpenGL 中提供了两种投影方式，一种是正交投影（Orthographic Projection），另一种是透视投影（Perspective Projection）。在本例中，使用的是透视投影方式。代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gluPerspective(<span class="number">45.0f</span>,(GLfloat)width/(GLfloat)height,<span class="number">0.001f</span>,<span class="number">100.0f</span>);</div></pre></td></tr></table></figure>

<p>它确定一个棱台为视域体，这个区域里面的对象才能被观察到，这个区域之外的对象被裁剪掉，不会出现在图像中，如下图所示。</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/opengl_image1.png" alt=""></p>
<h4 id="2-1-3_OpenGL_中的深度缓存函数">2.1.3 OpenGL 中的深度缓存函数</h4>
<p>在 OpenGL 中，如果不对面的深度加以判断，那么各个面将按照程序代码中定义的先后顺序进行绘制。在同一位置上，后绘制的面总是会将先绘制的面覆盖，哪怕后绘制的面实际应该是被先绘制的面遮挡住而不可见的。<br>因此，需要启动深度缓存检测，使得显示模式包含深度缓存，保证面的正确绘制。代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">glutInitDisplayMode (GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);</div></pre></td></tr></table></figure>

<p>深度缓存的初始化：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">glClearDepth(<span class="number">1.0f</span>);</div></pre></td></tr></table></figure>

<p>启动深度缓存检测：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">glEnable(GL_DEPTH_TEST);</div></pre></td></tr></table></figure>


<h3 id="2-2_外部模型文件的导入">2.2 外部模型文件的导入</h3>
<p>使用 OBJ 文件库<code>glm.h</code>和<code>glm.cpp</code>实现，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> initGLObjects()										</div><div class="line">{</div><div class="line">	<span class="keyword">switch</span>(model_id)</div><div class="line">	{</div><div class="line">		<span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">			glm_model= glmReadOBJ( <span class="string">"DATA/venus.obj"</span> );<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">			glm_model= glmReadOBJ( <span class="string">"DATA/al.obj"</span> );<span class="keyword">break</span>;</div><div class="line"></div><div class="line">	}</div><div class="line">	glmUnitize( glm_model );</div><div class="line">	glmScale( glm_model, <span class="number">3</span> );</div><div class="line">	glmFacetNormals( glm_model );</div><div class="line">	glmVertexNormals( glm_model, <span class="number">90</span> );</div><div class="line"></div><div class="line">	list_id = glmList( glm_model, GLM_MATERIAL | GLM_SMOOTH );</div><div class="line"></div><div class="line">	glmDelete( glm_model );</div><div class="line"></div><div class="line">	<span class="keyword">return</span> TRUE;										</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="3_OpenGL_光照和表面绘制函数">3 OpenGL 光照和表面绘制函数</h2>
<h3 id="3-1_OpenGL_光照模型">3.1 OpenGL 光照模型</h3>
<p>在 OpenGL 采用的简单光照模型中反射光可以分成三个分量：环境反射光（Ambient Light）、漫反射光（Diffuse Light）和镜面反射光（Specular Light）。</p>
<ul>
<li><strong>环境光</strong>：场景中的所有顶点都被这个分量影响。当一条光线击中物体表面时，它会均匀地向各个方向散射。在许多次表面的反射后，光看上去从各个方向而来。而OpenGL中的环境光部分就对应于这种物理现象。 </li>
<li><strong>漫反射光</strong>：当一束平行的入射光线照射到粗糙的表面时，因表面凹凸不平，造成反射光线向不同的方向无规则地反射，这种反射称之为“漫反射”或“漫射”。这个反射的光则称为漫反射光。</li>
<li><strong>镜面反射光</strong>：镜面反射是光照射在镜面或金属表面时产生的高光分量。<h3 id="3-2_光源">3.2 光源</h3>
<h4 id="3-2-1_OpenGL_点光源">3.2.1 OpenGL 点光源</h4>
使用三个 RGB 分量指定的单个颜色的点光源是发光体的最简单的模型。一个场景的点光源通过给出其位置和发射光颜色来定义。本程序中代码如下：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">GLfloat Light2Pos[] = { <span class="number">5.0f</span>, -<span class="number">7.0f</span>, -<span class="number">9.0f</span>, <span class="number">1.0f</span>};			</div><div class="line">GLfloat Light2Amb[] = { <span class="number">0.0f</span>,  <span class="number">0.0f</span>,  <span class="number">0.0f</span>, <span class="number">1.0f</span>};			 </div><div class="line">GLfloat Light2Dif[] = { <span class="number">1.0f</span>,  <span class="number">0.0f</span>,  <span class="number">0.0f</span>, <span class="number">1.0f</span>};			 </div><div class="line">GLfloat Light2Spc[] = {-<span class="number">0.2f</span>, -<span class="number">0.2f</span>, -<span class="number">0.2f</span>, <span class="number">1.0f</span>};			</div><div class="line"></div><div class="line">glLightfv(GL_LIGHT2, GL_AMBIENT, Light2Amb);			</div><div class="line">glLightfv(GL_LIGHT2, GL_DIFFUSE, Light2Dif);			</div><div class="line">glLightfv(GL_LIGHT2, GL_SPECULAR, Light2Spc);		</div><div class="line">glLightf(GL_LIGHT2,GL_QUADRATIC_ATTENUATION,<span class="number">0.05</span>);</div></pre></td></tr></table></figure>

<h4 id="3-2-2_OpenGL_方向光源">3.2.2 OpenGL 方向光源</h4>
<p>方向光源可以进一步定义成聚光灯形式，即将光的形状限制在一个圆锥内。</p>
<p>在 OpenGL 中通过<strong>聚光截止角</strong>、<strong>聚光方向</strong>、<strong>聚光指数</strong>几个分量来描述一个聚光灯。</p>
<ul>
<li><strong>聚光截止角</strong>：参数<code>GL_SPOT_CUTOFF</code>描述聚光灯光锥的轴线与其中心线的夹角，即光锥顶角的一半。当该参数缺省时，其值为 180.0，即光锥的顶角为 360 度，光向所有的方向发射，相当于点光源。在本程序中代码如下：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">glLightf(GL_LIGHT1, GL_SPOT_CUTOFF, <span class="number">30</span>);</div></pre></td></tr></table></figure>

<ul>
<li><strong>聚光方向</strong>：聚光方向决定光锥的轴向，通过齐次坐标进行描述，其默认值为(0.0, 0.0, -1.0)，即指向Z轴负轴。在进行模型变换和视点变换时，聚光方向也要进行几何变换，其结果将保存为视点坐标系下的坐标。</li>
<li><strong>聚光指数</strong>：参数<code>GL_SPOT_EXPONENT</code>描述光的集中程度，光锥中心的光强最大，从轴线向母线移动时光强逐渐衰减，缺省时为 0 。聚光指数越大，光源的聚焦效果越好。  除了定义聚光指数控制光锥内光强的分布，还可同时利用定位光源的衰减因子的设置光强衰减。</li>
</ul>
<p>本程序中关键代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">GLfloat Light1Pos[] = { <span class="number">0.0f</span>, <span class="number">10.0f</span>,-<span class="number">10.0f</span>, <span class="number">1.0f</span>};			</div><div class="line">GLfloat Light1Amb[] = { <span class="number">0.0f</span>,  <span class="number">0.0f</span>,  <span class="number">0.0f</span>, <span class="number">1.0f</span>};			</div><div class="line">GLfloat Light1Dif[] = { <span class="number">1.0f</span>,  <span class="number">1.0f</span>,  <span class="number">1.0f</span>, <span class="number">1.0f</span>};			</div><div class="line">GLfloat Light1Spc[] = {-<span class="number">0.2f</span>, -<span class="number">0.2f</span>, -<span class="number">0.2f</span>, <span class="number">1.0f</span>};			</div><div class="line">GLfloat light1_direction[]={ <span class="number">0.0f</span>, -<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>};		</div><div class="line"></div><div class="line">glLightfv(GL_LIGHT1, GL_POSITION, Light1Pos);		</div><div class="line">glLightfv(GL_LIGHT1, GL_AMBIENT, Light1Amb);		</div><div class="line">glLightfv(GL_LIGHT1, GL_DIFFUSE, Light1Dif);		</div><div class="line">glLightfv(GL_LIGHT1, GL_SPECULAR, Light1Spc);		</div><div class="line">glLightf(GL_LIGHT1, GL_SPOT_CUTOFF, <span class="number">30</span>);</div><div class="line">glLightf(GL_LIGHT1,GL_SPOT_EXPONENT,<span class="number">30.0</span>);</div><div class="line">glLightfv(GL_LIGHT1, GL_SPOT_DIRECTION,light1_direction);</div></pre></td></tr></table></figure>

<h4 id="3-2-3_指定一个_OpenGL_光源位置和类型">3.2.3 指定一个 OpenGL 光源位置和类型</h4>
<p>在 OpenGL 中，光源的位置坐标采用齐次坐标(x, y, z, w)的方式进行描述。当 w 为 0.0 时，表示相应的光源是定向光，(x, y, z)描述光源的方向；当 w 为 1.0 时，光源为定位光源，(x, y, z, w)表示光源在齐次坐标系下的具体位置。在上述两种情况中，位置坐标都会随着模型变换和视图变换进行变换，最后保存为视点坐标系下的坐标。</p>
<p>在本程序中，关键代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">GLfloat Light1Pos[] = { <span class="number">0.0f</span>, <span class="number">10.0f</span>,-<span class="number">10.0f</span>, <span class="number">1.0f</span>};</div><div class="line"></div><div class="line">glLoadIdentity();							<span class="comment">// 重置矩阵</span></div><div class="line">glTranslatef(<span class="number">0.0f</span>, <span class="number">0.0f</span>, -<span class="number">20.0f</span>);					<span class="comment">// 深入屏幕20个单位</span></div><div class="line">glLightfv(GL_LIGHT1, GL_POSITION, Light1Pos);	<span class="comment">// 放置灯光</span></div><div class="line">glLightfv(GL_LIGHT2, GL_POSITION, Light2Pos);		</div><div class="line">glLightfv(GL_LIGHT3, GL_POSITION, Light3Pos);		</div><div class="line">glLightfv(GL_LIGHT4, GL_POSITION, Light4Pos);		</div><div class="line">glTranslatef(SpherePos[<span class="number">0</span>], SpherePos[<span class="number">1</span>], SpherePos[<span class="number">2</span>]);	</div><div class="line">gluSphere(q, <span class="number">1.5f</span>, <span class="number">32</span>, <span class="number">16</span>);							</div><div class="line"></div><div class="line">glLoadIdentity();						<span class="comment">// 重置矩阵</span></div><div class="line">glRotatef(-yrot, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);			<span class="comment">// 绕Y轴旋转 -yrot 个单位</span></div><div class="line">glRotatef(-xrot, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);			<span class="comment">// 绕X轴旋转 -xrot 个单位</span></div><div class="line">glGetFloatv(GL_MODELVIEW_MATRIX,Minv);</div><div class="line">lp1[<span class="number">0</span>] = Light1Pos[<span class="number">0</span>];			</div><div class="line">lp1[<span class="number">1</span>] = Light1Pos[<span class="number">1</span>];								</div><div class="line">lp1[<span class="number">2</span>] = Light1Pos[<span class="number">2</span>];								</div><div class="line">lp1[<span class="number">3</span>] = Light1Pos[<span class="number">3</span>];								</div><div class="line">VMatMult(Minv, lp1);				</div><div class="line">glTranslatef(-ObjPos[<span class="number">0</span>], -ObjPos[<span class="number">1</span>], -ObjPos[<span class="number">2</span>]);	</div><div class="line">glGetFloatv(GL_MODELVIEW_MATRIX,Minv);</div><div class="line">wlp1[<span class="number">0</span>] = <span class="number">0.0f</span>;									</div><div class="line">wlp1[<span class="number">1</span>] = <span class="number">0.0f</span>;										</div><div class="line">wlp1[<span class="number">2</span>] = <span class="number">0.0f</span>;										</div><div class="line">wlp1[<span class="number">3</span>] = <span class="number">1.0f</span>;</div><div class="line">VMatMult(Minv, wlp1);														</div><div class="line">lp1[<span class="number">0</span>] += wlp1[<span class="number">0</span>];	</div><div class="line">lp1[<span class="number">1</span>] += wlp1[<span class="number">1</span>];									</div><div class="line">lp1[<span class="number">2</span>] += wlp1[<span class="number">2</span>];</div></pre></td></tr></table></figure>


<h4 id="3-2-4_指定_OpenGL_光源颜色">3.2.4 指定 OpenGL 光源颜色</h4>
<p>根据 OpenGL 所采用的光照模型，OpenGL 光源的颜色由环境光（AMBIENT）、漫反射光（DIFFUSE）、镜面反射光（SPECULAR）三个分量共同决定。其中漫反射光分量的值对光源颜色的影响最大。</p>
<p>在本程序中，使用以下方式设置光源颜色：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GLfloat Light1Amb[] = { <span class="number">0.0f</span>,  <span class="number">0.0f</span>,  <span class="number">0.0f</span>, <span class="number">1.0f</span>};			<span class="comment">// 环境光</span></div><div class="line">GLfloat Light1Dif[] = { <span class="number">1.0f</span>,  <span class="number">1.0f</span>,  <span class="number">1.0f</span>, <span class="number">1.0f</span>};			<span class="comment">// 漫反射</span></div><div class="line">GLfloat Light1Spc[] = {-<span class="number">0.2f</span>, -<span class="number">0.2f</span>, -<span class="number">0.2f</span>, <span class="number">1.0f</span>};			<span class="comment">// 镜面反射</span></div><div class="line"></div><div class="line">glLightfv(GL_LIGHT1, GL_AMBIENT, Light1Amb);		</div><div class="line">glLightfv(GL_LIGHT1, GL_DIFFUSE, Light1Dif);		</div><div class="line">glLightfv(GL_LIGHT1, GL_SPECULAR, Light1Spc);</div></pre></td></tr></table></figure>


<h4 id="3-2-5_指定_OpenGL_光源的光线强度衰减系数">3.2.5 指定 OpenGL 光源的光线强度衰减系数</h4>
<p>光强会随着距光源的距离而衰减，即离光源越远则光强越弱。在 OpenGL 中，定向光源位置为无穷远，禁用衰减，而对于定位光源，OpenGL 通过光源的发光量乘以衰减因子以实现衰减。衰减系数<code>attenuation</code>和距光源的距离关系如下图：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/opengl_image2.png" alt=""><br><img src="http://7u2ro1.com1.z0.glb.clouddn.com/opengl_image3.png" alt=""></p>
<p>在 OpenGL 中，环境光、漫反射光和镜面反射光的强度都会衰减。可以通过<code>glLight*</code>函数来设置衰减。<br>在本程序中，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">glLightf(GL_LIGHT2,GL_QUADRATIC_ATTENUATION,<span class="number">0.05</span>);</div></pre></td></tr></table></figure>

<h4 id="3-2-6_启用光源">3.2.6 启用光源</h4>
<p>在 OpenGL 中，设置完光源后，若需要设置好的光源对场景生效，需要满足两个条件。一是已经启用光照，使场景能接收光照，二是所设置的光源已经被开启，使得场景中的物体能接受该光源的光照。要启用光照或关闭光照，调用函数：<code>glEnable(GL_LIGHTING)</code> 或<code>glDisable(GL_LIGHTING)</code>。要使所定义的光源有效，则调用函数<code>glEnable(GL_LIGHT0)</code>。在本程序中代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">glEnable(GL_LIGHT1);							<span class="comment">// 启用灯光1、2、3、4</span></div><div class="line">glEnable(GL_LIGHT2);								</div><div class="line">glEnable(GL_LIGHT3);								</div><div class="line">glEnable(GL_LIGHT4);									</div><div class="line">glEnable(GL_LIGHTING);							<span class="comment">// 启用照明</span></div></pre></td></tr></table></figure>

<h3 id="3-3_OpenGL_表面材质和明暗处理">3.3 OpenGL 表面材质和明暗处理</h3>
<p>OpenGL 通过材质对红、绿、蓝三色光的反射率来描述材料的颜色。同光源一样，材料颜色也分成环境、漫反射和镜面反射分量，它们决定了材料对环境光、漫反射光和镜面反射光的反射程度，其中，材料对环境光与漫反射光的反射程度决定了材料的颜色。</p>
<p>若OpenGL 的光源颜色为（LR、LG、LB），材质颜色为（MR、MG、MB），在忽略所有其他反射效果并且没有其它光源的情况下，最终显示物体表面的颜色为（LR<em>MR、LG</em>MG、LB*MB）。</p>
<p>在本程序中，对材料的定义部分代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span> MatAmb[] = {<span class="number">0.4f</span>, <span class="number">0.4f</span>, <span class="number">0.4f</span>, <span class="number">1.0f</span>};				<span class="comment">// 材质-环境光</span></div><div class="line"><span class="keyword">float</span> MatDif[] = {<span class="number">0.9f</span>, <span class="number">0.9f</span>, <span class="number">0.9f</span>, <span class="number">1.0f</span>};				<span class="comment">// 材质-漫反射</span></div><div class="line"><span class="keyword">float</span> MatSpc[] = {<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>};				<span class="comment">// 材质-镜面反射</span></div><div class="line"><span class="keyword">float</span> MatShn[] = {<span class="number">0.0f</span>};								<span class="comment">// 材质-光泽度</span></div><div class="line"></div><div class="line">glMaterialfv(GL_FRONT, GL_AMBIENT, MatAmb);			<span class="comment">// 设置材质-环境光</span></div><div class="line">glMaterialfv(GL_FRONT, GL_DIFFUSE, MatDif);			<span class="comment">// 设置材质-漫反射</span></div><div class="line">glMaterialfv(GL_FRONT, GL_SPECULAR, MatSpc);		<span class="comment">// 设置材质-镜面反射</span></div><div class="line">glMaterialfv(GL_FRONT, GL_SHININESS, MatShn);		<span class="comment">// 设置材质-光泽度</span></div></pre></td></tr></table></figure>

<p>OpenGL子程序可用<strong>常数强度表面绘制</strong>或<strong> Gouraud 表面绘制方法</strong>来显示表面。</p>
<p>用<strong>常数强度表面绘制</strong>，即用单一颜色处理表面，称为平面明暗处理（Flat Shading），而用<strong> Gouraud 表面绘制方法</strong>则是用许多不同颜色处理，称为光滑明暗处理（Smooth Shading），也称为 Gourand 明暗处理（Gourand Shading）。</p>
<p>在本程序中，使用光滑明暗处理，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">glShadeModel(GL_SMOOTH);</div></pre></td></tr></table></figure>

<h2 id="4_支持交互式输入设备">4 支持交互式输入设备</h2>
<h3 id="4-1_GLUT_鼠标函数">4.1 GLUT 鼠标函数</h3>
<p>在本程序中，支持通过鼠标拖动来 360 度地旋转场景中通过外部 OBJ 文件读取进来的模型。实现代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> mouseFunc(GLint button, GLint action, GLint xMouse, GLint yMouse)</div><div class="line">{</div><div class="line">	<span class="keyword">if</span>(button == GLUT_LEFT_BUTTON)</div><div class="line">	{</div><div class="line">		<span class="keyword">switch</span>(action)</div><div class="line">		{</div><div class="line">			<span class="keyword">case</span> GLUT_DOWN:</div><div class="line">				xMouseClicked = xMouse;</div><div class="line">				yMouseClicked = yMouse;</div><div class="line">				isClicked = <span class="keyword">true</span>;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> GLUT_UP:</div><div class="line">				isClicked = <span class="keyword">false</span>;</div><div class="line">				isDragging = <span class="keyword">false</span>;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">		}</div><div class="line">	}</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">void</span> mouseMotion(GLint xMouse, GLint yMouse)</div><div class="line">{</div><div class="line">	<span class="keyword">if</span>(!isDragging)</div><div class="line">	{</div><div class="line">		<span class="keyword">if</span>(isClicked)</div><div class="line">		{</div><div class="line">			isDragging = <span class="keyword">true</span>;</div><div class="line">		}</div><div class="line">	}</div><div class="line">	<span class="keyword">else</span>{</div><div class="line">		<span class="keyword">if</span>(isClicked)</div><div class="line">		{</div><div class="line">			<span class="comment">//......下略.....</span></div><div class="line">		}</div><div class="line">	}</div><div class="line">}</div><div class="line"></div><div class="line">glutMouseFunc(mouseFunc);</div><div class="line">glutMotionFunc(mouseMotion);</div></pre></td></tr></table></figure>

<h3 id="4-2_GLUT_键盘函数">4.2 GLUT 键盘函数</h3>
<p>在本程序中，支持通过键盘移动场景中 4 个光源的位置。实现代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> keyboardProcess(GLubyte key, GLint xMouse, GLint yMouse)</div><div class="line">{</div><div class="line">	<span class="keyword">switch</span>(key)</div><div class="line">	{</div><div class="line"></div><div class="line">		<span class="keyword">case</span> <span class="string">'d'</span>:								<span class="comment">// 控制灯光2</span></div><div class="line">			Light2Pos[<span class="number">0</span>] += <span class="number">0.05f</span>;<span class="keyword">break</span>;</div><div class="line">		<span class="comment">//......下略......</span></div><div class="line">		<span class="keyword">case</span> <span class="string">'1'</span>:</div><div class="line">			model_id = <span class="number">0</span>;</div><div class="line">			initGLObjects();</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'2'</span>:</div><div class="line">			model_id = <span class="number">1</span>;</div><div class="line">			initGLObjects();</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">	}</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">void</span> spkeyboardProcess(GLint key, GLint xMouse, GLint yMouse)</div><div class="line">{</div><div class="line">	<span class="keyword">switch</span>(key)</div><div class="line">	{</div><div class="line">		<span class="keyword">case</span> GLUT_KEY_RIGHT:					<span class="comment">// 控制灯光1</span></div><div class="line">			Light1Pos[<span class="number">0</span>] += <span class="number">0.05f</span>;<span class="keyword">break</span>;</div><div class="line">			<span class="comment">//....下略....</span></div><div class="line">	}</div><div class="line">}</div><div class="line"></div><div class="line">glutKeyboardFunc(keyboardProcess);</div><div class="line">glutSpecialFunc(spkeyboardProcess);</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<!-- more -->

<h1 id="基于_OpenGL_的多光源场景绘制">基于 OpenGL 的多光源场景绘制</h1>
<p>通过使用 OpenGL 图形库，实现一个简单的，具有多个光源，且可以支持鼠标控制模型 360 度旋转，键盘控制多个光源位置，并且能够从外部<code>OBJ</code>文件中读入模型的三维场景绘制程序。</p>
<p>效果如下：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/opengl_image4.jpeg" alt="效果图1"></p>
]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[我做过的那些音乐类游戏——Catch The Beat 与 Unity3D 篇]]></title>
    <link href="http://yoursite.com/2015/01/26/Catch-The-Beat/"/>
    <id>http://yoursite.com/2015/01/26/Catch-The-Beat/</id>
    <published>2015-01-26T07:35:34.000Z</published>
    <updated>2015-01-31T16:01:25.020Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>这是本系列的第三篇文章，其他几篇见归档</p>
</blockquote>
<a id="more"></a>

<h1 id="Catch_The_Beat_与_Unity3D">Catch The Beat 与 Unity3D</h1>
<p>大三上接触了 Unity3D 游戏引擎，发现引擎的使用确实给游戏开发带来了极大的便利，尤其是Unity有着丰富的可视化界面，使用起来比较方便。此外，随着使用引擎时接触到越来越多的概念，开发游戏时的思路也开始慢慢清晰。</p>
<p>于是当时就试着用 Unity3D 引擎仿制了另一款音乐类游戏 OSU！ 中的 Catch The Beat 模式。</p>
<p>Catch The Beat 作为音乐类游戏来说，比较休闲且容易上手。原本的游戏的规则是这样的：</p>
<ul>
<li>玩家控制一个托着盘子的小人左右移动，去接按照节奏落下的水果。</li>
<li>水果按节奏落下，但有时相邻的两个距离很远，必须玩家按着加速键才能接到，而玩家速度过快时，又容易错过距离较近的水果。</li>
<li>玩家需要尽可能地按照节奏接下全部的水果。越合拍，连续接到的水果越多，分数越高。</li>
</ul>
<p>我仿制的版本效果如下：</p>
<embed width="675" height="400" type="application/x-shockwave-flash" src="http://www.56.com/flashApp/player_open.14.06.10.a.swf?vid=MTM0OTkwMjI1" rel="external nofollow" wmode="transparent" invokeurls="false" allowfullscreen="true" allowscriptaccess="never" allownetworking="internal" flashvars="tgid=1030_qq-enuotxduoy&loading_deco_version=off&ban_ad=on&ban_top_panel=on&ban_share_btn=on&ban_over_panel=on">

<hr>
<p>依旧是讲一下制作时与之前不同的地方。</p>
<a id="more"></a>

<h2 id="一、游戏功能上的完善">一、游戏功能上的完善</h2>
<p>相较于前两次，这一次的游戏更为完整。</p>
<p>支持键位的设定：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/ctb_1.jpg" alt="效果图"></p>
<p>可以选择不同的歌曲进行游戏：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/ctb_2.jpg" alt="效果图"></p>
<p>游戏过程中可以暂停，回到选歌界面重新选择，此外支持调节音量：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/ctb_3.jpg" alt="效果图"></p>
<p>最后一首歌曲结束后会出现评分界面：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/ctb_4.jpg" alt="效果图"></p>
<h2 id="二、2D_Toolkit_的使用">二、2D Toolkit 的使用</h2>
<p>当时 Unity 还没有自带 2D 功能，而我要制作的是一款 2D 游戏，为此，我使用了 2D Toolkit 插件。</p>
<p>基本上是利用插件提供的一个正交视图的摄像机。然后利用这个插件实现对精灵（Sprite）的支持。</p>
<p>首先导入插件，然后创建 tk2d 摄像机，如下图:</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/tk2d_1.jpg" alt="效果图"></p>
<p>我们可以在此设置游戏的分辨率。2DToolkit 会帮助完成<strong>分辨率的适配</strong>。</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/tk2d_2.jpg" alt="效果图"></p>
<p>然后创建一个精灵集。精灵集是 2DToolkit 中用来存放精灵图的容器，它产生一个或多个贴图图集，替代我们的原图片从而提高性能。Project -&gt; Create -&gt; tk2d -&gt; Sprite Collection如下图：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/tk2d_3.jpg" alt="效果图"></p>
<p>然后为精灵集命名：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/tk2d_4.jpg" alt="效果图"></p>
<p>打开编辑器，拖入图片资源，设置所需的碰撞盒类型：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/tk2d_5.jpg" alt="效果图"></p>
<p>完成后记得点击右上角的”Commit”提交</p>
<p>接下来就可以利用贴图集创建精灵（Sprite）了，Hierarchy -&gt; Create -&gt; tk2d -&gt; Sprite：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/tk2d_6.jpg" alt="效果图"></p>
<p>最后，我们需要在代码中获取并操作精灵，大致是这样：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tk2dSprite sprite;</div><div class="line">sprite = GetComponent&lt;tk2dSprite&gt;();</div></pre></td></tr></table></figure>

<h2 id="三、NGUI_的使用">三、NGUI 的使用</h2>
<p>虽然 2D Toolkit 也可以制作 UI，但是比较之下还是NGUI更为方便，功能也更强。因此，我在进行游戏以外的 Scene 中（包括选歌界面等）都使用的 NGUI。又因为 NGUI 和 2D Toolkit 在一个场景一起使用时，它们的Camera需要调整，比较麻烦，所以没有在进行游戏的场景中使用NGUI。</p>
<p><strong>因为在制作这个游戏时使用的NGUI版本较老，且只是在 NGUI 官方样例的基础上进行了一些修改，主要涉及的是 <code>ScrollView</code> 的使用，此处就不展开了。具体做法我会在下一篇文章（Jubeat篇）中详细描述。</strong></p>
<h2 id="四、编写代码时的一些不同">四、编写代码时的一些不同</h2>
<p>程序方面，整体思路与之前差不多，但因为使用了 Unity ，编写代码要考虑它脚本的生命周期，还有他面向组件编程的特点。此外它提供了许多方便的组件，所以在具体的实现上和以往还是有许多的不同之处。总结如下。</p>
<h3 id="1-_Unity3D中的一些重要概念">1. Unity3D中的一些重要概念</h3>
<p>初次接触 Unity 时并没有把一些概念弄得很清楚，在脚本间相互调用时就会有些困惑。不久前 Unity 的官网更新后仔细去看了看 Doc ，在此再梳理一下 Unity 中最重要的三个基本概念。</p>
<h4 id="a-_游戏对象（GameObject）">a. 游戏对象（GameObject）</h4>
<p>官网Doc的描述是这样的：</p>
<blockquote>
<p>Every object in your game is a GameObject. However, GameObjects don’t do anything on their own. They need special properties before they can become a character, an environment, or a special effect. But every one of these objects does so many different things. If every object is a GameObject, how do we differentiate an interactive power-up object from a static room? What makes these GameObjects different from each other?</p>
<p>The answer to this question is that GameObjects are containers. They are empty boxes which can hold the different pieces that make up a lightmapped island or a physics-driven car. So to really understand GameObjects, you have to understand these pieces; they are called Components. ……</p>
</blockquote>
<p>可以看到，在 Unity 中，游戏中所有物体都是游戏对象。（或者更直观具体一些，在 Hierarchy 目录下看到的所有东西都是游戏对象，<strong>Unity 是以游戏对象为单位进行操作的</strong>。）而游戏对象只是对各类物体的一个抽象，它本身是空的，什么也不做。如果希望一个游戏对象变成具体的东西，比如树、建筑、角色等等，就需要为它添加相应的行为和属性。</p>
<p>这时就引入了组件的概念。<strong>游戏对象是组件的容器。在这个容器中加入不同的组件，就可以得到不同的游戏对象。</strong></p>
<h4 id="b-_组件（Component）">b. 组件（Component）</h4>
<p><strong>每个组件都有它相应的功能。它可以为一个游戏对象添加相应的属性和行为。</strong>比如 Unity 中所有的游戏对象都有的<code>Transform</code>组件，它定义了游戏对象的位置、缩放、旋转等等，添加了这个组件的游戏对象就能够被定位并进行变形。再比如，添加了碰撞盒的游戏对象就能在相互之间进行碰撞检测，产生碰撞的效果。</p>
<h4 id="c-_脚本（Script）">c. 脚本（Script）</h4>
<p>官网Doc的描述是这样的：</p>
<blockquote>
<p>When you create a script and and attach it to a GameObject, the script appears in the GameObject’s Inspector just like a Component. This is because scripts become Components when they are saved - a script is just a specific type of Component. In technical terms, a script compiles as a type of Component, and is treated like any other Component by the Unity engine. So basically, a script is a Component that you are creating yourself. You will define its members to be exposed in the Inspector, and it will execute whatever functionality you’ve written.</p>
</blockquote>
<p>Unity 自带组件虽然很丰富，但每个游戏都会有它独特的功能要求，只靠自带的组件是不够的。这时我们就需要通过自己编写脚本来完成这些功能。</p>
<p>在 Unity 中，<strong>自己写的脚本其实就相当于一个自定义的组件</strong>。当我们把这个脚本附到游戏对象上时，就相当于为这个游戏对象添加了一个组件。我们完全可以在各个地方将自己写的脚本当组件来使用。</p>
<h3 id="2-_每个游戏对象的生命周期">2. 每个游戏对象的生命周期</h3>
<p>如下图所示：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/lifetime.jpg" alt="生命周期"></p>
<p>比较常用的有<code>Awake()</code>,<code>Start()</code>,<code>Update()</code>和<code>FixedUpdate()</code>。</p>
<p>比如这次我就通过为<code>FixedUpdate()</code>设置一个较小的间隔来进行计时。Unity 处理的效率不错，Note 可以很好地合上拍，游戏也没有卡顿的情况出现。</p>
<p>然后，每个脚本都有它独立的生命周期，对于自己写的脚本，各个脚本执行的先后顺序是不一定的（这一点有时会带来一些类似线程同步的麻烦）。但是也可以用如下图的方式规定它们执行的先后顺序。</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/tk2d_7.jpg" alt="效果图"></p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/tk2d_8.jpg" alt="效果图"></p>
<h3 id="3-_Prefab的使用">3. Prefab的使用</h3>
<p>在以往的程序中，当需要大量生成相似的对象时，我会写一个类，并添加相应的属性和方法。而在Unity中，我会考虑制作一个 Prefab ,并为它添加对应的脚本。</p>
<p>Prefab 在我的理解中相当于是一个游戏对象的模版，通过<code>Instantiate()</code>方法可以将其大量的实例化（复制作为模版的游戏对象，并放入场景中），此外在实例化的过程中，可以方便地修改每一个实例对象，使他们各不相同。</p>
<p>比如这一次的游戏，我将 Note 制成了 Prefab，并写了一个脚本<code>NoteScript</code>让每个 Note 控制自身的行为,比如移动、销毁等等。</p>
<h3 id="4-_各类组件的使用">4. 各类组件的使用</h3>
<p>Unity 自带的组件很多，换句话说，很多基本的功能 Unity 已经帮我们实现了，没有特殊的需求的话，我们可以直接使用。比如，Unity 提供的碰撞盒免去了自己写碰撞检测的麻烦（碰撞检测的算法也是个可以展开深入探讨的话题），降低了开发的难度。</p>
<h3 id="5-_Unity_的特殊文件夹——_Resources_文件夹">5. Unity 的特殊文件夹—— Resources 文件夹</h3>
<p>为了完成可以任意选择歌曲进行游戏的功能，我需要利用程序从文件中动态地载入歌曲信息。</p>
<p>这里就存在一个问题，从磁盘上读取音频文件后，需要转换成 Unity 的 AudioClip 类型才能使用。</p>
<p>当时制作这个游戏的时候我是通过将歌曲文件放在 Resources 文件夹下解决的。</p>
<blockquote>
<p>Resources 文件夹：可以在根目录下，也可以在子目录里，只要名子叫Resources就可以。比如目录：/xxx/xxx/Resources  和 /Resources 是一样的，无论多少个叫Resources的文件夹都可以。Resources文件夹下的资源不管你用还是不用都会被打包</p>
<p><code>Resource.Load</code> ：编辑时和运行时都可以通过Resource.Load来直接读取。</p>
<p><code>Resources.LoadAssetAtPath()</code> ：它可以读取Assets目录下的任意文件夹下的资源，它可以在编辑时或者编辑器运行时用，它但是它不能在真机上用，它的路径是”Assets/xx/xx.xxx” 必须是这种路径，并且要带文件的后缀名。</p>
<p><code>AssetDatabase.LoadAssetAtPath()</code>：它可以读取Assets目录下的任意文件夹下的资源，它只能在编辑时用。它的路径是”Assets/xx/xx.xxx” 必须是这种路径，并且要带文件的后缀名。</p>
</blockquote>
<p><strong>但这个方法存在一个严重的问题，就是文件夹下所有的文件都必须打包以后才能读到。这样一来，游戏发布以后新添加的曲子都是读不到的。后来我使用 WWW 类解决了这一问题，详细内容会在下一篇文章（Jubeat篇）中展开。</strong></p>
<h3 id="6-_使用静态类">6. 使用静态类</h3>
<p>将游戏中经常需要传递的值且需要保持一致的值都使用一个静态类记录，这样免去了大量获取游戏对象和组件的麻烦，且保证值是一致的。（当然，也可以用单例模式来实现，当时没有学习设计模式，使用的是静态类）</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>这是本系列的第三篇文章，其他几篇见归档</p>
</blockquote>
<!-- more -->

<h1 id="Catch_The_Beat_与_Unity3D">Catch The Beat 与 Unity3D</h1>
<p>大三上接触了 Unity3D 游戏引擎，发现引擎的使用确实给游戏开发带来了极大的便利，尤其是Unity有着丰富的可视化界面，使用起来比较方便。此外，随着使用引擎时接触到越来越多的概念，开发游戏时的思路也开始慢慢清晰。</p>
<p>于是当时就试着用 Unity3D 引擎仿制了另一款音乐类游戏 OSU！ 中的 Catch The Beat 模式。</p>
<p>Catch The Beat 作为音乐类游戏来说，比较休闲且容易上手。原本的游戏的规则是这样的：</p>
<ul>
<li>玩家控制一个托着盘子的小人左右移动，去接按照节奏落下的水果。</li>
<li>水果按节奏落下，但有时相邻的两个距离很远，必须玩家按着加速键才能接到，而玩家速度过快时，又容易错过距离较近的水果。</li>
<li>玩家需要尽可能地按照节奏接下全部的水果。越合拍，连续接到的水果越多，分数越高。</li>
</ul>
<p>我仿制的版本效果如下：</p>
<embed width="675" height="400" type="application/x-shockwave-flash" src="http://www.56.com/flashApp/player_open.14.06.10.a.swf?vid=MTM0OTkwMjI1" rel="external nofollow" wmode="transparent" invokeurls="false" allowfullscreen="true" allowscriptaccess="never" allownetworking="internal" flashvars="tgid=1030_qq-enuotxduoy&loading_deco_version=off&ban_ad=on&ban_top_panel=on&ban_share_btn=on&ban_over_panel=on">

<hr>
<p>依旧是讲一下制作时与之前不同的地方。</p>
]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[我做过的那些音乐类游戏——O2JAM 与 Android 篇]]></title>
    <link href="http://yoursite.com/2015/01/25/O2JAM/"/>
    <id>http://yoursite.com/2015/01/25/O2JAM/</id>
    <published>2015-01-25T12:53:47.000Z</published>
    <updated>2015-01-31T16:01:03.278Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>这是本系列的第二篇文章，其他几篇见归档</p>
</blockquote>
<a id="more"></a>

<h1 id="劲乐团（O2JAM）与Android">劲乐团（O2JAM）与Android</h1>
<p>有了上一次制作太鼓达人的经验，在大二上安卓的课程设计时，我决定尝试一下制作O2JAM。</p>
<p>下面是一段效果演示的视频：</p>
<embed width="675" height="400" type="application/x-shockwave-flash" src="http://www.56.com/flashApp/player_open.14.06.10.a.swf?vid=MTM0OTg2Mjk3" rel="external nofollow" wmode="transparent" invokeurls="false" allowfullscreen="true" allowscriptaccess="never" allownetworking="internal" flashvars="tgid=1030_qq-enuotxduoy&loading_deco_version=off&ban_ad=on&ban_top_panel=on&ban_share_btn=on&ban_over_panel=on">

<hr>
<p>O2JAM是一款典型的下落式MUG。整体来说，它的游戏逻辑与太鼓达人十分相似。此外，安卓开发也是使用的<code>Java</code>，所以整个程序的思路与之前制作的太鼓达人（详见上一篇）很接近，在此就只讲与之前不同的地方。</p>
<a id="more"></a>

<h2 id="一、Note类的修改">一、Note类的修改</h2>
<p>原来太鼓的程序中，我只是用<code>Notes</code>类记录了<code>Note</code>对象的位置以及类型，没有很好地利用面向对象的特性。</p>
<p>所以在这一次O2JAM的程序中，我再次分析了Note的行为，并在<code>Note</code>类中添加了相应的属性与方法。</p>
<p>首先，每个Note对象都要完成以下两件事：</p>
<ul>
<li>在屏幕上显示</li>
<li>从屏幕上端移动到下端</li>
</ul>
<p>然后，每个Note对象的状态：</p>
<ul>
<li>根据是否在屏幕范围内，可以分为<strong>可见</strong>与<strong>不可见</strong>两种状态。</li>
<li>根据是否被点击过，可分为<strong>已点击</strong>和<strong>未点击</strong>两种状态</li>
</ul>
<p>再者，歌曲的BPM（每分钟有多少拍）不一定是固定不变的，当BPM改变时，Note移动的速度也需要相应地改变，所以每个Note对象需要记录自己的移动速度。</p>
<p>综上，我将一个Note<strong>绘制自己</strong>、<strong>移动自己</strong>以及<strong>检测自己是否可见</strong>这三种行为封装进了Note类中，并添加了相应的属性。如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Note</span> </span>{</div><div class="line"></div><div class="line">	<span class="keyword">float</span> x;       <span class="comment">//Note的位置</span></div><div class="line">	<span class="keyword">float</span> y;</div><div class="line">	<span class="keyword">int</span> offset;</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> <span class="keyword">float</span> speed = <span class="number">0.5</span>f;    <span class="comment">//Note移动的速度</span></div><div class="line">	</div><div class="line">	<span class="keyword">int</span> type;</div><div class="line">	<span class="keyword">int</span> keyNum;</div><div class="line">	</div><div class="line">	<span class="comment">//屏幕宽、高，用于适配不同分辨率</span></div><div class="line">	<span class="keyword">float</span> screenWidth;</div><div class="line">	<span class="keyword">float</span> screenHeight;</div><div class="line">	</div><div class="line">	<span class="keyword">boolean</span> visible = <span class="keyword">false</span>;     <span class="comment">//Note是否可见</span></div><div class="line">	<span class="keyword">boolean</span> pressed = <span class="keyword">false</span>;     <span class="comment">//Note是否已点击过</span></div><div class="line"></div><div class="line">	<span class="keyword">static</span> Bitmap key1_5;        <span class="comment">//Note对应的图片，由keyNum决定</span></div><div class="line">	<span class="keyword">static</span> Bitmap key2_4;</div><div class="line">	<span class="keyword">static</span> Bitmap key3;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="title">Note</span>(<span class="keyword">int</span> offset,<span class="keyword">int</span> keyNum,<span class="keyword">float</span> screenWidth,<span class="keyword">float</span> screenHeight){</div><div class="line">		<span class="keyword">this</span>.screenWidth = screenWidth;</div><div class="line">		<span class="keyword">this</span>.screenHeight = screenHeight;</div><div class="line">				</div><div class="line">		<span class="keyword">this</span>.offset = offset;</div><div class="line">		</div><div class="line">		<span class="keyword">this</span>.y = -key3.getHeight();</div><div class="line">		<span class="keyword">this</span>.keyNum = keyNum;</div><div class="line">		</div><div class="line">		<span class="comment">//此处写死了只有5个按键，不够灵活，改进见下文</span></div><div class="line">		<span class="keyword">switch</span>(keyNum){</div><div class="line">			<span class="keyword">case</span> <span class="number">1</span> : <span class="keyword">this</span>.x = <span class="number">0</span>; <span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="number">2</span> : <span class="keyword">this</span>.x = screenWidth / <span class="number">5</span>; <span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="number">3</span> : <span class="keyword">this</span>.x = screenWidth / <span class="number">5</span> * <span class="number">2</span>; <span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="number">4</span> : <span class="keyword">this</span>.x = screenWidth / <span class="number">5</span> * <span class="number">3</span>; <span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="number">5</span> : <span class="keyword">this</span>.x = screenWidth / <span class="number">5</span> * <span class="number">4</span>; <span class="keyword">break</span>;</div><div class="line">		}</div><div class="line">		</div><div class="line">	}</div><div class="line">	</div><div class="line"> 	<span class="annotation">@SuppressLint</span>(<span class="string">"NewApi"</span>)</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DrawNote</span>(Canvas canvas, Paint paint) {</div><div class="line">			<span class="comment">//......此处省略......</span></div><div class="line">	}</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveNote</span>(){</div><div class="line">		<span class="keyword">if</span>(visible){</div><div class="line">			<span class="keyword">this</span>.y += speed; </div><div class="line">		}</div><div class="line">		testVisible();</div><div class="line">	}</div><div class="line">    </div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVisible</span>(){</div><div class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.y &lt; -key3.getHeight() || <span class="keyword">this</span>.y &gt; screenHeight){</div><div class="line">			<span class="keyword">this</span>.visible = <span class="keyword">false</span>;</div><div class="line">		}</div><div class="line">		<span class="keyword">else</span>{</div><div class="line">			<span class="keyword">this</span>.visible = <span class="keyword">true</span>;</div><div class="line">		}</div><div class="line">	}   </div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="关于按键部分的一点反思">关于按键部分的一点反思</h3>
<p>可以看到，上面的代码中写死了有5个按键。当时我也和制作太鼓时一样，声明了5个布尔型变量来表示5个按键。</p>
<p>那么，问题来了。O2JAM其实是支持多种模式的，包括4键、5键、7键。<strong>显然上面的写法不够灵活，当要改变按键的数量的时候就不得不写大量相似的代码。</strong></p>
<p>现在想到的改进方法有两种。</p>
<p>第一种：如下声明一个布尔型的数组。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> keyCount;</div><div class="line"><span class="keyword">boolean</span>[] key = <span class="keyword">new</span> <span class="keyword">boolean</span>[keyCount];</div></pre></td></tr></table></figure>

<p>然后就可以通过调整<code>keyCount</code>来方便地改变按键数量，通过循环遍历数组的方式，就可以避免写大量重复的代码。</p>
<p>第二种：可以将按键也抽象出来，单独写一个类。然后利用一个数组之类的结构，将所有的按键对象存储起来。</p>
<h2 id="二、关于安卓的View与SurfaceView">二、关于安卓的View与SurfaceView</h2>
<p>对于安卓应用来说，每个应用程序启动时，会默认地分配一个系统进程，进程中有一个主线程。这个主线程负责该应用内的各个组件（Activity、Service等）的执行。可见主线程的任务是相当繁重的。</p>
<p>现在让我们来比较一下<code>View</code>和<code>SurfaceView</code>。</p>
<p><code>View</code>和<code>SurfaceView</code>是安卓提供的两个视图类，它们都内置了一个用于绘图的画布，可以自己绘制想要的画面。它们的区别在于，<code>View</code>是在主线程内进行画面的刷新，而<code>SurfaceView</code>则支持单独建立一个新的线程用于画面的刷新。<strong>因此，当我们需要频繁地刷新画面时，如果使用<code>View</code>就会影响主线程进行其他的工作，而其他工作的存在又影响了画面的及时刷新。这时，使用<code>SurfaceView</code>，在新的线程中进行画面刷新就不会影响主线程进行其他的工作。</strong></p>
<p>然后回到O2JAM的制作上来，游戏需要不停地刷新改变Note的位置，显然需要使用<code>SurfaceView</code>,在一个独立的线程中进行画面刷新。</p>
<p>下面就再来谈一谈<code>SurfaceView</code>的使用。</p>
<p>首先，我写了一个类<code>AnimView</code>，它继承了<code>SurfaceView</code>，然后为了接受surface变化的消息，并在surface上进行绘制，我实现了<code>SufaceHolder.Callback</code>接口。最后，实现<code>Runnable</code>接口以新建一个线程。</p>
<blockquote>
<p>整个过程：<br>继承SurfaceView并实现SurfaceHolder.Callback接口</p>
<p>——&gt; SurfaceView.getHolder()获得SurfaceHolder对象</p>
<p>——&gt;SurfaceHolder.addCallback(callback)添加回调函数</p>
<p>——&gt;SurfaceHolder.lockCanvas()获得Canvas对象并锁定画布</p>
<p>——&gt; Canvas绘画</p>
<p>——&gt;SurfaceHolder.unlockCanvasAndPost(Canvas canvas)结束锁定画图，并提交改变，将图形显示。</p>
</blockquote>
<p>在O2JAM程序中，大致的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimView</span> <span class="keyword">extends</span> <span class="title">SurfaceView</span> <span class="keyword">implements</span> <span class="title">SurfaceHolder</span>.<span class="title">Callback</span>,<span class="title">Runnable</span> </span>{</div><div class="line"></div><div class="line">    	<span class="keyword">private</span> Thread mThread = <span class="keyword">new</span> Thread(<span class="keyword">this</span>);    <span class="comment">//声明绘图线程</span></div><div class="line">    	<span class="keyword">private</span> <span class="keyword">boolean</span> mIsRunning = <span class="keyword">false</span>;           <span class="comment">//当前绘图线程是否在运行</span></div><div class="line">    	</div><div class="line">	<span class="comment">//SurfaceHolder，就如同字面意思，surface的持有者，我们需要通过它对surface进行操作</span></div><div class="line">    	<span class="keyword">private</span> SurfaceHolder mSurfaceHolder = <span class="keyword">null</span>;  </div><div class="line">    	<span class="comment">//当前画布</span></div><div class="line">	<span class="keyword">private</span> Canvas mCanvas = <span class="keyword">null</span>; </div><div class="line">    	<span class="comment">//用于告知在哪个Activity中显示这个SurfaceView，Context是Activity的超类，此处体现了多态</span></div><div class="line">    	<span class="keyword">private</span> Context mContext = <span class="keyword">null</span>;</div><div class="line">    	</div><div class="line">	<span class="comment">//.......此处省略...........</span></div><div class="line">    	</div><div class="line">	<span class="keyword">public</span> <span class="title">AnimView</span>(Context context,<span class="keyword">float</span> screenWidth,<span class="keyword">float</span> screenHeight) {</div><div class="line">		<span class="keyword">super</span>(context);</div><div class="line">			</div><div class="line">		mContext = context;</div><div class="line">		mPaint = <span class="keyword">new</span> Paint();</div><div class="line">		mScreenWidth = screenWidth;</div><div class="line">		mScreenHeight = screenHeight;</div><div class="line"></div><div class="line">		mSurfaceHolder = getHolder();</div><div class="line">		mSurfaceHolder.addCallback(<span class="keyword">this</span>);</div><div class="line">		    </div><div class="line">		init();    <span class="comment">//用于初始化所需的各种变量，详细内容在此省略</span></div><div class="line">	}</div><div class="line">		   	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceChanged</span>(SurfaceHolder holder, <span class="keyword">int</span> format, <span class="keyword">int</span> width,</div><div class="line">				<span class="keyword">int</span> height) {</div><div class="line">			</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceCreated</span>(SurfaceHolder holder) {</div><div class="line">		<span class="keyword">if</span>(loadFinished){</div><div class="line">			mIsRunning = <span class="keyword">true</span>;						    </div><div class="line">			startTime = System.currentTimeMillis();								</div><div class="line">			dataThread.start();        <span class="comment">//添加Note的线程开始工作</span></div><div class="line">			mThread.start();           <span class="comment">//绘图线程开始工作</span></div><div class="line">			updataThread.start();      <span class="comment">//移动Note的线程开始工作</span></div><div class="line">			timerThread.start();       <span class="comment">//计时线程开始工作</span></div><div class="line">			<span class="keyword">if</span>(!mMediaPlayer.isPlaying() && mIsRunning) {</div><div class="line">				mMediaPlayer.start();    <span class="comment">//开始播放音乐</span></div><div class="line">			}</div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceDestroyed</span>(SurfaceHolder holder) {</div><div class="line">		mIsRunning = <span class="keyword">false</span>;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">//绘图线程		</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {</div><div class="line">		<span class="keyword">while</span> (mIsRunning) {</div><div class="line"></div><div class="line">			<span class="keyword">synchronized</span> (mSurfaceHolder) {</div><div class="line"></div><div class="line">				mCanvas =mSurfaceHolder.lockCanvas();  </div><div class="line">				draw();</div><div class="line"></div><div class="line">				mSurfaceHolder.unlockCanvasAndPost(mCanvas);</div><div class="line">			}</div><div class="line">			<span class="keyword">try</span> {</div><div class="line">				Thread.sleep(<span class="number">1000</span>/<span class="number">120</span>);    <span class="comment">//帧率120</span></div><div class="line">			} <span class="keyword">catch</span> (InterruptedException e) {</div><div class="line">				e.printStackTrace();</div><div class="line">			}</div><div class="line">		}</div><div class="line">	}</div><div class="line">		</div><div class="line">	<span class="comment">//自己写的方法，详细描述了需要绘制的内容</span></div><div class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">draw</span>(){</div><div class="line">		<span class="keyword">int</span> frameCount = <span class="number">0</span>;</div><div class="line">		<span class="keyword">if</span>(frameCount++ &lt; <span class="number">2</span>)</div><div class="line">			mCanvas.drawColor(Color.BLACK);</div><div class="line">		mPaint.setColor(Color.WHITE);					</div><div class="line">		drawNote(noteList1);</div><div class="line">			</div><div class="line">		<span class="comment">//..........此处省略..........</span></div><div class="line">			</div><div class="line">		showNum();</div><div class="line">		showAccuracy();</div><div class="line">	}</div><div class="line">    																</div><div class="line"> }</div></pre></td></tr></table></figure>

<h2 id="三、分辨率适配">三、分辨率适配</h2>
<p>安卓设备的分辨率各不相同。因此有必要进行分辨率的适配。为了实现这一点，我们首先要做两件事：</p>
<ol>
<li><p>设置在全屏下进行游戏</p>
</li>
<li><p>获取当前设备的屏幕分辨率</p>
</li>
</ol>
<p>我是这么做的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//要求全屏</span></div><div class="line">requestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class="line">getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,</div><div class="line">WindowManager.LayoutParams.FLAG_FULLSCREEN);</div><div class="line"><span class="comment">//获取当前屏幕        </span></div><div class="line">Display display = getWindowManager().getDefaultDisplay();</div><div class="line"><span class="comment">//通过getWidth()和getHeight()获取当前屏幕分辨率        </span></div><div class="line">mAnimView = <span class="keyword">new</span> AnimView(<span class="keyword">this</span>,display.getWidth(), display.getHeight());</div><div class="line"></div><div class="line">setContentView(mAnimView);</div></pre></td></tr></table></figure>

<p>然后只要在绘制图形的时候根据获取到的屏幕宽度和高度，按比例进行绘制即可。</p>
<h2 id="四、多点触控">四、多点触控</h2>
<p>使用<code>onTouchEvent()</code>处理传递到对应<code>View</code>的触摸事件。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span>(MotionEvent event){</div><div class="line">	<span class="comment">//获取当前屏幕上一共有几根手指按在屏幕上</span></div><div class="line">	<span class="keyword">int</span> keyDownCount = event.getPointerCount();</div><div class="line">	<span class="keyword">switch</span> (event.getAction() & MotionEvent.ACTION_MASK) {</div><div class="line">		<span class="keyword">case</span> MotionEvent.ACTION_DOWN:{</div><div class="line">			<span class="comment">//......单指按下时执行的内容，此处省略......</span></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		}</div><div class="line">	   </div><div class="line">		<span class="keyword">case</span> MotionEvent.ACTION_MOVE:{</div><div class="line">			<span class="comment">//......单指移动时执行的内容，此处省略......</span></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		}</div><div class="line">			   </div><div class="line">		<span class="keyword">case</span> MotionEvent.ACTION_UP:{</div><div class="line">			<span class="comment">//......单指抬起时执行的内容，此处省略......</span></div><div class="line">			<span class="keyword">break</span>;				</div><div class="line">		}</div><div class="line">			</div><div class="line">		<span class="keyword">case</span> MotionEvent.ACTION_POINTER_DOWN:{</div><div class="line">			<span class="comment">//......多指移动时执行的内容，此处省略......</span></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		}</div><div class="line">			</div><div class="line">		<span class="keyword">case</span> MotionEvent.ACTION_POINTER_UP:{</div><div class="line">			<span class="comment">//......多指抬起时执行的内容，此处省略......</span></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		}			</div><div class="line">	}    	</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;	</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>这是本系列的第二篇文章，其他几篇见归档</p>
</blockquote>
<!-- more -->

<h1 id="劲乐团（O2JAM）与Android">劲乐团（O2JAM）与Android</h1>
<p>有了上一次制作太鼓达人的经验，在大二上安卓的课程设计时，我决定尝试一下制作O2JAM。</p>
<p>下面是一段效果演示的视频：</p>
<embed width="675" height="400" type="application/x-shockwave-flash" src="http://www.56.com/flashApp/player_open.14.06.10.a.swf?vid=MTM0OTg2Mjk3" rel="external nofollow" wmode="transparent" invokeurls="false" allowfullscreen="true" allowscriptaccess="never" allownetworking="internal" flashvars="tgid=1030_qq-enuotxduoy&loading_deco_version=off&ban_ad=on&ban_top_panel=on&ban_share_btn=on&ban_over_panel=on">

<hr>
<p>O2JAM是一款典型的下落式MUG。整体来说，它的游戏逻辑与太鼓达人十分相似。此外，安卓开发也是使用的<code>Java</code>，所以整个程序的思路与之前制作的太鼓达人（详见上一篇）很接近，在此就只讲与之前不同的地方。</p>
]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 ActionScript3.0 和 PaperVision 3D 实现简单的三维空间]]></title>
    <link href="http://yoursite.com/2015/01/22/AS3-0/"/>
    <id>http://yoursite.com/2015/01/22/AS3-0/</id>
    <published>2015-01-22T05:50:01.000Z</published>
    <updated>2015-01-30T13:19:55.655Z</updated>
    <content type="html"><![CDATA[<a id="more"></a>

<h1 id="使用_AS3-0_和_PaperVision_3D_实现简单的三维空间">使用 AS3.0 和 PaperVision 3D 实现简单的三维空间</h1>
<p>刚上大二时做的，演示视频如下：</p>
<embed width="675" height="400" type="application/x-shockwave-flash" src="http://www.56.com/flashApp/player_open.14.06.10.a.swf?vid=MTM0OTYzODM0" rel="external nofollow" wmode="transparent" invokeurls="false" allowfullscreen="true" allowscriptaccess="never" allownetworking="internal" flashvars="tgid=1030_qq-enuotxduoy&loading_deco_version=off&ban_ad=on&ban_top_panel=on&ban_share_btn=on&ban_over_panel=on">

<a id="more"></a>

<p>代码如下：</p>
<figure class="highlight as3"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div></pre></td><td class="code"><pre><div class="line"><span class="package"><span class="keyword">package</span></span></div><div class="line">{</div><div class="line">	<span class="preprocessor"><span class="keyword">import</span> flash.events.Event;</span></div><div class="line">	<span class="preprocessor"><span class="keyword">import</span> flash.events.KeyboardEvent;</span></div><div class="line">	<span class="preprocessor"><span class="keyword">import</span> flash.geom.Point;</span></div><div class="line">	<span class="preprocessor"><span class="keyword">import</span> flash.ui.Keyboard;</span></div><div class="line">	<span class="preprocessor"><span class="keyword">import</span> flash.events.MouseEvent;</span></div><div class="line">	</div><div class="line">	<span class="preprocessor"><span class="keyword">import</span> org.papervision3d.cameras.CameraType;</span></div><div class="line">	<span class="preprocessor"><span class="keyword">import</span> org.papervision3d.cameras.SpringCamera3D;</span></div><div class="line">	<span class="preprocessor"><span class="keyword">import</span> org.papervision3d.core.math.Number3D;</span></div><div class="line">	<span class="preprocessor"><span class="keyword">import</span> org.papervision3d.materials.BitmapFileMaterial;</span></div><div class="line">	<span class="preprocessor"><span class="keyword">import</span> org.papervision3d.materials.ColorMaterial;</span></div><div class="line">	<span class="preprocessor"><span class="keyword">import</span> org.papervision3d.objects.DisplayObject3D;</span></div><div class="line">	<span class="preprocessor"><span class="keyword">import</span> org.papervision3d.objects.primitives.PaperPlane;</span></div><div class="line">	<span class="preprocessor"><span class="keyword">import</span> org.papervision3d.objects.primitives.Sphere;</span></div><div class="line">	<span class="preprocessor"><span class="keyword">import</span> org.papervision3d.view.BasicView;</span></div><div class="line">	<span class="preprocessor"><span class="keyword">import</span> org.papervision3d.objects.primitives.Cube;</span></div><div class="line">	<span class="preprocessor"><span class="keyword">import</span> org.papervision3d.materials.utils.MaterialsList;</span></div><div class="line">	<span class="preprocessor"><span class="keyword">import</span> org.papervision3d.materials.special.CompositeMaterial;</span>		</div><div class="line">	<span class="preprocessor"><span class="keyword">import</span> org.papervision3d.materials.*;</span>	</div><div class="line">	<span class="preprocessor"><span class="keyword">import</span> org.papervision3d.core.math.Matrix3D;</span></div><div class="line">	<span class="preprocessor"><span class="keyword">import</span> org.papervision3d.events.InteractiveScene3DEvent;</span></div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Space_3d</span> <span class="keyword">extends</span> <span class="title">BasicView</span></span>{</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">var</span> previousMousePoint:Point = <span class="keyword">new</span> Point();<span class="comment">//声明记录刚按下时鼠标位置的变量</span></div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">const</span> FORWARD:Number3D=<span class="keyword">new</span> Number3D(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">private</span> <span class="keyword">var</span> cubeContainer:DisplayObject3D;<span class="comment">//声明立方体容器</span></div><div class="line">		<span class="keyword">private</span> <span class="keyword">var</span> starContainer:Sphere;<span class="comment">//声明星星容器</span></div><div class="line">		<span class="keyword">private</span> <span class="keyword">var</span> stars:DisplayObject3D;<span class="comment">//声明星星物件</span></div><div class="line">		<span class="keyword">private</span> <span class="keyword">var</span> earth:Sphere;<span class="comment">//声明地球物件</span></div><div class="line">		<span class="keyword">private</span> <span class="keyword">var</span> cube:Cube;<span class="comment">//声明立方体</span></div><div class="line">		</div><div class="line">		<span class="keyword">private</span> <span class="keyword">var</span> myCamera:SpringCamera3D;<span class="comment">//声明摄像机（弹性摄像机）</span></div><div class="line">		</div><div class="line">		<span class="keyword">private</span> <span class="keyword">var</span> isMouseDown:Boolean = <span class="literal">false</span>;<span class="comment">//记录鼠标是否按下的布尔型变量</span></div><div class="line">		</div><div class="line">		<span class="comment">//记录键盘对应各键是否按下的布尔型变量</span></div><div class="line">		<span class="keyword">private</span> <span class="keyword">var</span> keyForward:Boolean = <span class="literal">false</span>;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">var</span> keyBackward:Boolean = <span class="literal">false</span>;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">var</span> keyLeft:Boolean = <span class="literal">false</span>;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">var</span> keyRight:Boolean = <span class="literal">false</span>;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">var</span> keyUper:Boolean = <span class="literal">false</span>;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">var</span> keyLower:Boolean = <span class="literal">false</span>;</div><div class="line">		</div><div class="line">		<span class="comment">//构造函数</span></div><div class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Space_3d</span><span class="params">()</span></span>{</div><div class="line">			<span class="comment">//调用父类BasicView的构造方法，实例化视窗，宽高与舞台一直，自动对齐场景，启用鼠标感应，摄像机为弹性摄像机</span></div><div class="line">			<span class="keyword">super</span>(stage.stageWidth , stage.stageHeight,<span class="literal">true</span>,<span class="literal">true</span>,CameraType.SPRING);</div><div class="line">			<span class="keyword">this</span>.viewport.buttonMode = <span class="literal">true</span>;<span class="comment">//启用按键模式</span></div><div class="line">			</div><div class="line">			Init3DObject();<span class="comment">//调用初始化3D物件的函数</span></div><div class="line">			startRendering();<span class="comment">//渲染</span></div><div class="line">		}</div><div class="line">		</div><div class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Init3DObject</span><span class="params">()</span><span class="type">:void</span></span>{</div><div class="line">			<span class="comment">//关于摄像机的一些设置</span></div><div class="line">			myCamera = SpringCamera3D(camera);<span class="comment">//弹性摄像机</span></div><div class="line">			myCamera.mass = <span class="number">20</span>;<span class="comment">//摄像机质量20</span></div><div class="line">			myCamera.damping = <span class="number">20</span>;<span class="comment">//弹力的阻尼20</span></div><div class="line">			myCamera.stiffness = <span class="number">10</span>;<span class="comment">//弹簧硬度10</span></div><div class="line">			myCamera.positionOffset = <span class="keyword">new</span> Number3D(<span class="number">0</span> , <span class="number">30</span> , -<span class="number">100</span>);<span class="comment">//摄像机位置偏移量</span></div><div class="line">			myCamera.lookOffset = <span class="keyword">new</span> Number3D(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>);<span class="comment">//摄像机观察目标位置偏移量</span></div><div class="line">			myCamera.far = <span class="number">10000</span>;</div><div class="line">			</div><div class="line">			<span class="comment">//实例化星星和它的容器</span></div><div class="line">			starContainer = <span class="keyword">new</span> Sphere(<span class="literal">null</span> , <span class="number">3000</span> , <span class="number">30</span> ,<span class="number">30</span>);</div><div class="line">			stars = <span class="keyword">new</span> DisplayObject3D();</div><div class="line">			</div><div class="line">			<span class="keyword">var</span> starContainerVertsNum:uint = starContainer.geometry.vertices.length;<span class="comment">//记录星星容器顶点数的变量</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i:uint = <span class="number">0</span> ; i &lt; starContainerVertsNum ; i++){</div><div class="line">				<span class="comment">//星星颜色随机</span></div><div class="line">				<span class="keyword">var</span> sphereMat:ColorMaterial = <span class="keyword">new</span> ColorMaterial(<span class="number">0xff0000</span> * Math.random());</div><div class="line">				<span class="keyword">var</span> mysphere:Sphere = <span class="keyword">new</span> Sphere(sphereMat , <span class="number">10</span> , <span class="number">2</span> ,<span class="number">2</span>);				</div><div class="line">				<span class="comment">//星星位置，在球形容器内随机</span></div><div class="line">				mysphere.x = Math.random()*starContainer.geometry.vertices[i].x;</div><div class="line">				mysphere.y = Math.random()*starContainer.geometry.vertices[i].y;</div><div class="line">				mysphere.z = Math.random()*starContainer.geometry.vertices[i].z;</div><div class="line">				mysphere.scale = Math.random();</div><div class="line">				</div><div class="line">				stars.addChild(mysphere);</div><div class="line">			}</div><div class="line">			</div><div class="line">			<span class="comment">//地球的贴图</span></div><div class="line">			<span class="keyword">var</span> earthMat:BitmapFileMaterial = <span class="keyword">new</span> BitmapFileMaterial(<span class="string">"assets/earth1.jpg"</span>,<span class="literal">true</span>);</div><div class="line">			earthMat.doubleSided = <span class="literal">true</span>;</div><div class="line">			<span class="comment">//实例化地球</span></div><div class="line">			earth = <span class="keyword">new</span> Sphere(earthMat ,<span class="number">500</span> , <span class="number">20</span> , <span class="number">20</span>);</div><div class="line">			earth.z = <span class="number">1500</span>;	</div><div class="line">			<span class="comment">//实例化立方体容器</span></div><div class="line">			cubeContainer = <span class="keyword">new</span> DisplayObject3D();</div><div class="line">			</div><div class="line">			<span class="comment">//立方体每个面的贴图</span></div><div class="line">			<span class="keyword">var</span> mat1:BitmapFileMaterial = <span class="keyword">new</span> BitmapFileMaterial(<span class="string">"assets/mat1.jpg"</span>,<span class="literal">true</span>);</div><div class="line">			<span class="keyword">var</span> mat2:BitmapFileMaterial = <span class="keyword">new</span> BitmapFileMaterial(<span class="string">"assets/mat2.jpg"</span>,<span class="literal">true</span>);</div><div class="line">			<span class="keyword">var</span> mat3:BitmapFileMaterial = <span class="keyword">new</span> BitmapFileMaterial(<span class="string">"assets/mat3.jpg"</span>,<span class="literal">true</span>);</div><div class="line">			<span class="keyword">var</span> mat4:BitmapFileMaterial = <span class="keyword">new</span> BitmapFileMaterial(<span class="string">"assets/mat4.jpg"</span>,<span class="literal">true</span>);</div><div class="line">			<span class="keyword">var</span> mat5:BitmapFileMaterial = <span class="keyword">new</span> BitmapFileMaterial(<span class="string">"assets/mat5.jpg"</span>,<span class="literal">true</span>);</div><div class="line">			<span class="keyword">var</span> mat6:BitmapFileMaterial = <span class="keyword">new</span> BitmapFileMaterial(<span class="string">"assets/mat6.jpg"</span>,<span class="literal">true</span>);			</div><div class="line"></div><div class="line">			mat1.doubleSided = <span class="literal">false</span>;<span class="comment">//关闭材质的双面模式</span></div><div class="line">			mat1.interactive = <span class="literal">true</span>;<span class="comment">//允许与鼠标进行交互</span></div><div class="line">			mat2.doubleSided = <span class="literal">false</span>;</div><div class="line">			mat2.interactive = <span class="literal">true</span>;</div><div class="line">			mat3.doubleSided = <span class="literal">false</span>;</div><div class="line">			mat3.interactive = <span class="literal">true</span>;</div><div class="line">			mat4.doubleSided = <span class="literal">false</span>;</div><div class="line">			mat4.interactive = <span class="literal">true</span>;			</div><div class="line">			mat5.doubleSided = <span class="literal">false</span>;</div><div class="line">			mat5.interactive = <span class="literal">true</span>;</div><div class="line">			mat6.doubleSided = <span class="literal">false</span>;</div><div class="line">			mat6.interactive = <span class="literal">true</span>;</div><div class="line">			</div><div class="line">			<span class="comment">//为各个面设置贴图</span></div><div class="line">			<span class="keyword">var</span> ml:MaterialsList = <span class="keyword">new</span> MaterialsList({</div><div class="line">				top:mat1,</div><div class="line">				bottom:mat2,</div><div class="line">				left:mat3,</div><div class="line">				right:mat4,</div><div class="line">				front:mat5,</div><div class="line">				back:mat6</div><div class="line">			});</div><div class="line">			<span class="comment">//实例化立方体</span></div><div class="line">			cube = <span class="keyword">new</span> Cube(ml, <span class="number">40</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>);		</div><div class="line">			<span class="comment">//将立方体加入容器</span></div><div class="line">			cubeContainer.addChild(cube);</div><div class="line">			<span class="comment">//将立方体容器，星星，地球加入场景</span></div><div class="line">			scene.addChild(cubeContainer);</div><div class="line">			scene.addChild(stars);</div><div class="line">			scene.addChild(earth);</div><div class="line">			<span class="comment">//设置键盘监听和鼠标监听</span></div><div class="line">			stage.addEventListener(KeyboardEvent.KEY_DOWN , eKeyDown);</div><div class="line">			stage.addEventListener(KeyboardEvent.KEY_UP , eKeyUp);</div><div class="line">			cube.addEventListener(InteractiveScene3DEvent.OBJECT_OUT, eMouseUp);<span class="comment">//为立方体设鼠标监听</span></div><div class="line">			cube.addEventListener(InteractiveScene3DEvent.OBJECT_PRESS, eMouseDown);</div><div class="line">			cube.addEventListener(InteractiveScene3DEvent.OBJECT_RELEASE, eMouseUp);</div><div class="line">			<span class="comment">//摄像机的目标为立方体容器，不设为立方体，这样可以在鼠标转动立方体时，摄像机不跟随发生移动</span></div><div class="line">			myCamera.target = cubeContainer;</div><div class="line">		}</div><div class="line">		</div><div class="line">		<span class="keyword">override</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">onRenderTick</span><span class="params">(e:Event = null)</span><span class="type">:void</span></span>{</div><div class="line">			<span class="keyword">if</span>(isMouseDown){</div><div class="line">				<span class="comment">//获得当前鼠标位置</span></div><div class="line">				<span class="keyword">var</span> currentMousePoint:Point = <span class="keyword">new</span> Point(viewport.containerSprite.mouseX, viewport.containerSprite.mouseY);</div><div class="line">				<span class="comment">//将当前鼠标位置和先前的位置做差，得到相应的向量</span></div><div class="line">				<span class="keyword">var</span> difference:Point = currentMousePoint.subtract(previousMousePoint);</div><div class="line">				<span class="keyword">var</span> vector:Number3D = <span class="keyword">new</span> Number3D(difference.x, difference.y, <span class="number">0</span>);</div><div class="line">				</div><div class="line">				<span class="keyword">var</span> rotationAxis:Number3D = Number3D.cross(vector, FORWARD);</div><div class="line">				rotationAxis.normalize();</div><div class="line">				<span class="comment">//得到旋转矩阵</span></div><div class="line">				<span class="keyword">var</span> distance:Number = Point.distance(currentMousePoint, previousMousePoint);</div><div class="line">				<span class="keyword">var</span> rotationMatrix:Matrix3D = Matrix3D.rotationMatrix(rotationAxis.x, -rotationAxis.y, rotationAxis.z, distance / <span class="number">250</span>);</div><div class="line">			 	<span class="comment">//矩阵相乘，实现转动</span></div><div class="line">				cube.transform.calculateMultiply3x3(rotationMatrix, cube.transform);</div><div class="line">				previousMousePoint = currentMousePoint;<span class="comment">//将当前鼠标位置设为先前鼠标位置</span></div><div class="line">			}</div><div class="line">			</div><div class="line">			myCamera.lookAt(cubeContainer);<span class="comment">//摄像机看向立方体容器</span></div><div class="line">			</div><div class="line">			earth.yaw(<span class="number">0.4</span>);<span class="comment">//地球自转</span></div><div class="line">			move();<span class="comment">//移动</span></div><div class="line">			</div><div class="line">			<span class="keyword">super</span>.onRenderTick();</div><div class="line">		}</div><div class="line">		</div><div class="line">		<span class="comment">//键盘按键抬起时的动作</span></div><div class="line">		<span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">eKeyUp</span><span class="params">(event:KeyboardEvent)</span><span class="type">:void</span></span>{</div><div class="line">			<span class="keyword">switch</span>(event.keyCode){</div><div class="line">				<span class="keyword">case</span> Keyboard.UP:</div><div class="line">					keyForward = <span class="literal">false</span>;</div><div class="line">					<span class="keyword">break</span>;			</div><div class="line">				</div><div class="line">				<span class="keyword">case</span> Keyboard.DOWN:</div><div class="line">					keyBackward = <span class="literal">false</span>;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				</div><div class="line">				<span class="keyword">case</span> Keyboard.LEFT:</div><div class="line">					keyLeft = <span class="literal">false</span>;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				</div><div class="line">				<span class="keyword">case</span> Keyboard.RIGHT:</div><div class="line">					keyRight = <span class="literal">false</span>;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				</div><div class="line">				<span class="keyword">case</span> <span class="string">"W"</span>.charCodeAt():</div><div class="line">					keyUper = <span class="literal">false</span>;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				</div><div class="line">				<span class="keyword">case</span> <span class="string">"S"</span>.charCodeAt():</div><div class="line">					keyLower = <span class="literal">false</span>;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				</div><div class="line">				<span class="keyword">case</span> <span class="string">"A"</span>.charCodeAt():</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				</div><div class="line">				<span class="keyword">case</span> <span class="string">"D"</span>.charCodeAt():</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">			}</div><div class="line">		}</div><div class="line">		</div><div class="line">		<span class="comment">//键盘按键按下时的动作</span></div><div class="line">		<span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">eKeyDown</span><span class="params">(event:KeyboardEvent)</span><span class="type">:void</span></span>{</div><div class="line">			<span class="keyword">switch</span>(event.keyCode){</div><div class="line">				</div><div class="line">				<span class="keyword">case</span> Keyboard.UP:</div><div class="line">					keyForward = <span class="literal">true</span>;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				</div><div class="line">				<span class="keyword">case</span> Keyboard.DOWN:</div><div class="line">					keyBackward = <span class="literal">true</span>;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				</div><div class="line">				<span class="keyword">case</span> Keyboard.LEFT:</div><div class="line">					keyLeft = <span class="literal">true</span>;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				</div><div class="line">				<span class="keyword">case</span> Keyboard.RIGHT:</div><div class="line">					keyRight = <span class="literal">true</span>;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">					</div><div class="line">				<span class="keyword">case</span> <span class="string">"W"</span>.charCodeAt():{</div><div class="line">					keyUper = <span class="literal">true</span>;</div><div class="line">				}<span class="keyword">break</span>;</div><div class="line">				</div><div class="line">				<span class="keyword">case</span> <span class="string">"S"</span>.charCodeAt():{</div><div class="line">					keyLower = <span class="literal">true</span>;</div><div class="line">				}<span class="keyword">break</span>;</div><div class="line">				</div><div class="line">				<span class="keyword">case</span> <span class="string">"A"</span>.charCodeAt():{</div><div class="line">					<span class="keyword">if</span>(cubeContainer.scale &lt;= <span class="number">0.15</span>){</div><div class="line">						cubeContainer.scale = <span class="number">0.15</span>;<span class="comment">//限制允许的缩小的极限</span></div><div class="line">					}</div><div class="line">					<span class="keyword">else</span>{</div><div class="line">						cubeContainer.scale -= <span class="number">0.05</span>;</div><div class="line">					}</div><div class="line">				}<span class="keyword">break</span>;</div><div class="line">				</div><div class="line">				<span class="keyword">case</span> <span class="string">"D"</span>.charCodeAt():{</div><div class="line">					cubeContainer.scale += <span class="number">0.1</span>;</div><div class="line">				}<span class="keyword">break</span>;</div><div class="line">			}</div><div class="line">		}</div><div class="line">		<span class="comment">//移动立方体所用函数</span></div><div class="line">		<span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">move</span><span class="params">()</span><span class="type">:void</span></span>{</div><div class="line">			<span class="comment">//前后移动</span></div><div class="line">			<span class="keyword">if</span>(keyForward){</div><div class="line">				cubeContainer.moveForward(<span class="number">15</span>);</div><div class="line">			}</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(keyBackward){</div><div class="line">				cubeContainer.moveBackward(<span class="number">15</span>);</div><div class="line">			}</div><div class="line">			<span class="comment">//左右转动</span></div><div class="line">			<span class="keyword">if</span>(keyLeft){</div><div class="line">				<span class="keyword">if</span>(cubeContainer.scale &lt;= <span class="number">0.4</span>){</div><div class="line">					cubeContainer.localRotationY += <span class="number">10</span>;</div><div class="line">				}</div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(cubeContainer.scale &lt;= <span class="number">1</span>){</div><div class="line">					cubeContainer.localRotationY += <span class="number">4</span>;</div><div class="line">				}</div><div class="line">				<span class="keyword">else</span>{</div><div class="line">					cubeContainer.localRotationY += <span class="number">1</span>;</div><div class="line">				}</div><div class="line">			}</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(keyRight){</div><div class="line">				<span class="keyword">if</span>(cubeContainer.scale &lt;= <span class="number">0.4</span>){</div><div class="line">					cubeContainer.localRotationY -= <span class="number">10</span>;</div><div class="line">				}</div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(cubeContainer.scale &lt;= <span class="number">1</span>){</div><div class="line">					cubeContainer.localRotationY -= <span class="number">4</span>;</div><div class="line">				}</div><div class="line">				<span class="keyword">else</span>{</div><div class="line">					cubeContainer.localRotationY -= <span class="number">1</span>;</div><div class="line">				}</div><div class="line">			}</div><div class="line">			<span class="comment">//上下移动</span></div><div class="line">			<span class="keyword">if</span>(keyUper){</div><div class="line">				cubeContainer.moveUp(<span class="number">15</span>);</div><div class="line">			}</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(keyLower){</div><div class="line">				cubeContainer.moveDown(<span class="number">15</span>);</div><div class="line">			}</div><div class="line">		}		</div><div class="line">		</div><div class="line">		<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">eMouseDown</span><span class="params">(e:InteractiveScene3DEvent)</span><span class="type">:void</span></span>{</div><div class="line">			isMouseDown=<span class="literal">true</span>;</div><div class="line">			<span class="comment">//获得刚按下时鼠标的坐标</span></div><div class="line">			previousMousePoint.x = viewport.containerSprite.mouseX;</div><div class="line">			previousMousePoint.y = viewport.containerSprite.mouseY;</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">eMouseUp</span><span class="params">(e:InteractiveScene3DEvent)</span><span class="type">:void</span></span>{</div><div class="line">			isMouseDown = <span class="literal">false</span>;</div><div class="line">		}</div><div class="line"></div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<!-- more -->

<h1 id="使用_AS3-0_和_PaperVision_3D_实现简单的三维空间">使用 AS3.0 和 PaperVision 3D 实现简单的三维空间</h1>
<p>刚上大二时做的，演示视频如下：</p>
<embed width="675" height="400" type="application/x-shockwave-flash" src="http://www.56.com/flashApp/player_open.14.06.10.a.swf?vid=MTM0OTYzODM0" rel="external nofollow" wmode="transparent" invokeurls="false" allowfullscreen="true" allowscriptaccess="never" allownetworking="internal" flashvars="tgid=1030_qq-enuotxduoy&loading_deco_version=off&ban_ad=on&ban_top_panel=on&ban_share_btn=on&ban_over_panel=on">

]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[我做过的那些音乐类游戏——太鼓达人与 JAVA 篇]]></title>
    <link href="http://yoursite.com/2015/01/22/Taiko/"/>
    <id>http://yoursite.com/2015/01/22/Taiko/</id>
    <published>2015-01-21T16:46:19.000Z</published>
    <updated>2015-01-31T15:29:14.904Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>前言</p>
<p>出于对音乐类游戏的爱好，从大学正式学习编程开始，我就陆陆续续地尝试用当时学到的知识把自己接触过的一些音乐类游戏给实现出来。</p>
<p>从大一开始，整个大学期间我试着做过太鼓达人、O2JAM（劲乐团）、Catch The Beat还有Jubeat（乐动魔方）。刚开始时做的东西比较简陋，只是简单地实现了游戏的玩法，后来随着开始使用游戏引擎以及经验、知识的增加，做的游戏也开始完善起来。在此就写几篇文章作为记录和总结。</p>
</blockquote>
<p><a id="more"></a></p>
<h1 id="太鼓达人与Java">太鼓达人与Java</h1>
<p>制作太鼓达人的时候是在大一，当时只学习了基础的C语言和Java。所以它是使用Java的Swing与AWT制作的图形界面。</p>
<p>实现的功能有以下这些：</p>
<ol>
<li>游戏开始同时播放背景音乐；</li>
<li>从磁盘上的文件中读取设定好的鼓点的时间和鼓点的颜色（红或蓝）；</li>
<li>按照从文件中读取的时间和颜色在最右端加入鼓点，并使之向左滚动到指定位置；</li>
<li>当鼓点到达指定位置时需按键盘上的对应按键（D、K为蓝色，F、J为红色）进行打击；</li>
<li>当按下对应按键时发出对应音效；</li>
<li>根据打击时鼓点相对指定位置进行判定，显示“不可” “可” “良”，若超过指定位置一定距离不打击同样判定为“不可”；</li>
<li>打击时记录分数和连击数以及最大连击数；</li>
<li>出现“不可”连击重新从0开始记录；</li>
<li>连击数达到50、100、200 、300、400……时播放相应音效。</li>
</ol>
<p>下面是一段效果演示的视频：</p>
<embed width="675" height="400" type="application/x-shockwave-flash" src="http://www.56.com/flashApp/player_open.14.06.10.a.swf?vid=MTM0OTgzNDUw" rel="external nofollow" wmode="transparent" invokeurls="false" allowfullscreen="true" allowscriptaccess="never" allownetworking="internal" flashvars="tgid=1030_qq-enuotxduoy&loading_deco_version=off&ban_ad=on&ban_top_panel=on&ban_share_btn=on&ban_over_panel=on">

<p><a id="more"></a></p>
<h2 id="制作的一些要点">制作的一些要点</h2>
<h3 id="一、分析游戏涉及的对象及行为">一、分析游戏涉及的对象及行为</h3>
<p>游戏中主要涉及的对象是鼓点以及四个按键，涉及的行为主要包括计时（用于同步，使鼓点合拍）、生成鼓点、移动鼓点、点击按键播放音效和判定，最后还有分数的统计。</p>
<p>对于鼓点，当时我写了如下的一个类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Notes {</div><div class="line">	Image noteImage ;    <span class="comment">//鼓点的图片，红色和蓝色是两张图片</span></div><div class="line">	<span class="keyword">int</span> x = <span class="number">0</span>;           <span class="comment">//鼓点的x坐标</span></div><div class="line">	<span class="keyword">int</span> y = <span class="number">50</span>;          <span class="comment">//鼓点的y坐标，游戏中固定不变。</span></div><div class="line">	<span class="keyword">int</span> type = <span class="number">0</span>;        <span class="comment">//鼓点的类型，0表示红色，8表示蓝色</span></div><div class="line">	Notes(<span class="keyword">int</span> x,<span class="keyword">int</span> type){</div><div class="line">		<span class="keyword">this</span>.x = x;</div><div class="line">		<span class="keyword">this</span>.type = type;</div><div class="line">		<span class="keyword">switch</span>(type){</div><div class="line">			<span class="keyword">case</span> <span class="number">0</span>:	noteImage = redImage; <span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="number">8</span>: noteImage = blueImage;<span class="keyword">break</span>;</div><div class="line">		}</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>并使用一个<code>ArrayList</code>将当前显示在屏幕上所有的Note对象存储起来：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//存储Notes</span></div><div class="line">ArrayList &lt;Notes&gt;noteList = <span class="keyword">new</span> ArrayList &lt;Notes&gt;();</div></pre></td></tr></table></figure>

<p>因为Note是按时间顺序添加进这个<code>ArrayList</code>中的，所以它是有序的。</p>
<p><strong>现在回过头来看，觉得使用<code>ArrayList</code>是不合适的。</strong>因为<code>ArrayList</code>底层是基于数组的实现，添加和删除时要大量移动数据。而我对这组数据的操作只是在头部删除和在尾部插入，此外还有就是从头到尾的遍历，<strong>这样看来使用一个带头尾指针的单链表更为合适。可以改用<code>LinkedList</code>。</strong></p>
<p>对于四个按键，当时我只是用四个布尔型的变量来记录它们是否按下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span> drumOutL = <span class="keyword">false</span>;</div><div class="line"><span class="keyword">boolean</span> drumOutR = <span class="keyword">false</span>;</div><div class="line"><span class="keyword">boolean</span> drumInL = <span class="keyword">false</span>;</div><div class="line"><span class="keyword">boolean</span> drumInR = <span class="keyword">false</span>;</div></pre></td></tr></table></figure>

<h3 id="二、从文件中读取谱面文件信息">二、从文件中读取谱面文件信息</h3>
<p>定义了Notes类以后，下一个问题是怎么才能让程序知道，什么时间该添加一个Note，这个Note是什么类型的，下一个Note又该什么时候添加。换句话说，就是如何保证每次游戏时，我们打击的鼓点（Note）都是按同样的时间、顺序、种类出现的。音乐类游戏玩家一般将这样一组固定的Note序列称为谱面。</p>
<p>分析自己机器上安装的一些音乐类游戏，基本都是将谱面的信息（每个Note出现的时间点、类型、位置等，视具体游戏而定）记录在一个文本文件中。然后让程序去读取。于是我也模仿着将谱面信息记录在文本文件中。<em>（大一时觉得字符串处理比较麻烦，将时间信息和类型信息分开存在了<code>offset.txt</code>和<code>type.txt</code>两个文本文件中。<strong>这显然是不合理的，合并为一个文件才是更好的处理方法</strong>。）</em></p>
<p>接着声明了两个数组分别记录Note的时间和类型信息（使用时按队列操作），如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] offset;  <span class="comment">//记录Note应被点击的时间</span></div><div class="line"><span class="keyword">int</span>[] types;   <span class="comment">//记录Note的类型，0表示红，8表示蓝</span></div></pre></td></tr></table></figure>

<p>然后通过以下代码将文本文件中的信息记录到上面声明的两个数组中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataInput</span>(){</div><div class="line"></div><div class="line">	<span class="keyword">try</span>{</div><div class="line">		FileReader offsetRead = <span class="keyword">new</span> FileReader(<span class="string">"data/offset.txt"</span>);</div><div class="line">		BufferedReader offsetBr = <span class="keyword">new</span> BufferedReader(offsetRead);</div><div class="line">		String row;</div><div class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;    <span class="comment">//队尾指针</span></div><div class="line">		<span class="keyword">while</span>((row = offsetBr.readLine())!=<span class="keyword">null</span>){</div><div class="line">			offset[i] = Integer.parseInt(row);    <span class="comment">//元素入队	   </span></div><div class="line">			i++;</div><div class="line">		}</div><div class="line">		offsetBr.close();</div><div class="line">		i = <span class="number">0</span>;       <span class="comment">//队尾指针</span></div><div class="line">		FileReader typeRead = <span class="keyword">new</span> FileReader(<span class="string">"data/type.txt"</span>);</div><div class="line">		BufferedReader typeBr = <span class="keyword">new</span> BufferedReader(typeRead);</div><div class="line">		<span class="keyword">while</span>((row = typeBr.readLine())!=<span class="keyword">null</span>){</div><div class="line">			types[i] = Integer.parseInt(row);    <span class="comment">//元素入队</span></div><div class="line">			i++;</div><div class="line">		}</div><div class="line">		typeBr.close();</div><div class="line">	}</div><div class="line">	<span class="keyword">catch</span>(IOException e){</div><div class="line">		e.printStackTrace();</div><div class="line">	}</div><div class="line">	<span class="keyword">catch</span>(NumberFormatException e){</div><div class="line">		e.printStackTrace();</div><div class="line">	}</div><div class="line">		</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这样就获取到了谱面的信息。</p>
<h3 id="三、图形界面的绘制并添加相应的监听">三、图形界面的绘制并添加相应的监听</h3>
<p>绘制图形界面部分基本是通过反复调用<code>repaint()</code>方法来实现的。再通过一些布尔型变量来控制图形是否需要绘制。</p>
<p>所用JPanel中<code>paintComponent()</code>方法如下（没有做分辨率适配，硬编码问题严重）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paintComponent</span>(Graphics g){</div><div class="line">	<span class="keyword">super</span>.paintComponent(g);</div><div class="line">	g.drawImage(barRight,<span class="number">181</span>,<span class="number">0</span>,<span class="keyword">this</span>);</div><div class="line">	g.drawImage(barLeft,<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>);</div><div class="line">	g.setColor(Color.GRAY);</div><div class="line">	g.drawOval(<span class="number">219</span>, <span class="number">47</span>, <span class="number">103</span>, <span class="number">103</span>);</div><div class="line">	g.fillOval(<span class="number">223</span>, <span class="number">50</span>, <span class="number">95</span>, <span class="number">95</span>);</div><div class="line"></div><div class="line">	<span class="comment">//绘制Note</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; noteList.size();i++){</div><div class="line">		g.drawImage(noteList.get(i).noteImage,</div><div class="line">					noteList.get(i).x,</div><div class="line">					noteList.get(i).y,</div><div class="line">					<span class="keyword">this</span>);</div><div class="line">	}</div><div class="line">	<span class="comment">//如果点击了，则画上标识</span></div><div class="line">	<span class="keyword">if</span>(drumOutL) {</div><div class="line">		g.drawImage(drumOuterLeft,<span class="number">12</span>,<span class="number">35</span>,<span class="keyword">this</span>);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">//......此处省略......</span></div><div class="line">		</div><div class="line">	g.drawString(<span class="string">"Score:  "</span>+String.valueOf(score),<span class="number">800</span> , <span class="number">50</span>);</div><div class="line">	g.drawString(<span class="string">"Combo:  "</span>+String.valueOf(combo),<span class="number">800</span> , <span class="number">150</span>);</div><div class="line">	g.drawString(<span class="string">"Maxcombo:  "</span>+String.valueOf(maxCombo),<span class="number">800</span> , <span class="number">175</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<blockquote>
<p><code>repaint()</code>是触发重绘动作，当调用<code>repaint()</code>后，会通知<code>repaintManager</code>增加一个重绘区域，<code>repaintManager</code>在一定条件下会合并一些重绘区域，然后派发一个绘制动作到事件派发线程（<code>EventQueue</code>）。事件派发线程执行到这个绘制事件时，就会调用组件的<code>paint()</code>，在<code>paint()</code>方法里会先调用<code>update</code>来将重绘区域清空（默认情况下是填充白色），然后再调用<code>paintcomponent()</code>来绘制自身，最后调用<code>paintChildren</code>来绘制所有的子。具体流程可以参考<code>JComponent</code>里的<code>paint()</code>方法。</p>
</blockquote>
<p>然后通过以下程序监听键盘</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">		<span class="comment">//监听键盘</span></div><div class="line">addKeyListener(<span class="keyword">new</span> KeyAdapter(){</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span>(KeyEvent e) {</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">switch</span>(e.getKeyCode()){</div><div class="line">		<span class="keyword">case</span> KeyEvent.VK_D: drumOutL = <span class="keyword">true</span>; <span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> KeyEvent.VK_K: drumOutR = <span class="keyword">true</span>; <span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> KeyEvent.VK_F: drumInL = <span class="keyword">true</span>; <span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> KeyEvent.VK_J: drumInR = <span class="keyword">true</span>; <span class="keyword">break</span>;</div><div class="line">		}</div><div class="line">		<span class="comment">//按键按下时进行判定</span></div><div class="line">		judge();</div><div class="line">		repaint();</div><div class="line">		<span class="keyword">try</span> {</div><div class="line">			hitSound();</div><div class="line">		} <span class="keyword">catch</span> (IOException e1) {</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e1.printStackTrace();</div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span>(KeyEvent e) {</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">switch</span>(e.getKeyCode()){</div><div class="line">		<span class="keyword">case</span> KeyEvent.VK_D: drumOutL = <span class="keyword">false</span>; <span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> KeyEvent.VK_K: drumOutR = <span class="keyword">false</span>; <span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> KeyEvent.VK_F: drumInL = <span class="keyword">false</span>; <span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> KeyEvent.VK_J: drumInR = <span class="keyword">false</span>; <span class="keyword">break</span>;</div><div class="line">		}			</div><div class="line">		repaint();</div><div class="line">	}			</div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="四、使鼓点和音乐合拍">四、使鼓点和音乐合拍</h3>
<p>现在已经获取到了Note的时间点，我们还需要获得音乐开始播放了多久，并将其不断和Note的时间进行比较，以确保按时添加Note。</p>
<p><strong>音乐类游戏对时间精度要求很高，上百毫秒的误差对于BPM较高且Note较密集的曲子来说，已经严重影响游戏了。</strong>最开始的时候，我是使用<code>Timer</code>来实现计时的，但是<code>Timer</code>根本做不到这么高的精度，当我以1ms的间隔调用<code>Timer</code>时，整个程序变得非常的卡，哪怕将其放宽到近百毫秒，效率也依旧非常的差。而且当我输出获取到的时间的时候，发现它的误差很大，并不是像理想中那样按程序规定的间隔增加的。这个问题一直到我学习了<strong>线程</strong>的知识以后才解决。</p>
<h4 id="多线程的使用">多线程的使用</h4>
<p>刚刚提到，开始的时候程序效率很差，鼓点表示的节奏要比实际音乐的节奏慢很多（鼓点仍是有节奏的，但是BPM比实际音乐低很多）。后来学习了线程的知识以后，<strong>我将原来的程序中添加鼓点部分和移动鼓点部分分别独立放到一个线程中，不再使用<code>Timer</code>，改为单独使用一个线程计时</strong>。终于成功提高了程序效率，使鼓点合上了音乐。</p>
<p>首先我自己写了一个<code>MyTimer</code>类用于计时</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTimer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>{</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> pastTime = <span class="number">0</span>;    <span class="comment">//音乐开始播放了多久</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">long</span> startTime;            <span class="comment">//音乐开始播放时的系统时间</span></div><div class="line">	</div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>){</div><div class="line">			<span class="keyword">try</span> {</div><div class="line">				Thread.sleep(<span class="number">1</span>);</div><div class="line">			} <span class="keyword">catch</span> (InterruptedException e) {</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			}</div><div class="line">			pastTime = (<span class="keyword">int</span>) (System.currentTimeMillis() - startTime);</div><div class="line">		}</div><div class="line">	}</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="title">MyTimer</span>(){</div><div class="line">		startTime=System.currentTimeMillis();</div><div class="line">	}</div><div class="line">	</div><div class="line">}</div></pre></td></tr></table></figure>

<p>它实现了<code>Runable</code>接口，接下来就可以建立一个新的线程专门用于计时</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MyTimer myTimer = <span class="keyword">new</span> MyTimer();</div><div class="line">Thread clock = <span class="keyword">new</span> Thread(myTimer , <span class="string">"计时"</span>);</div><div class="line">clock.start();</div></pre></td></tr></table></figure>

<p>我试着输出通过它获取到的时间（如下图），可以看到，基本稳定，偶尔有较小的偏差。</p>
<p>图片</p>
<p>然后我为添加Note部分和移动Note部分各建立一个新的线程，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用于添加Note的线程</span></div><div class="line">Thread addThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable(){</div><div class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;		<span class="comment">//offset队列队首指针</span></div><div class="line">	<span class="annotation">@Override</span>			</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>){</div><div class="line">			<span class="keyword">try</span> {</div><div class="line">				Thread.sleep(<span class="number">1</span>);</div><div class="line">			} <span class="keyword">catch</span> (InterruptedException e) {</div><div class="line">				e.printStackTrace();</div><div class="line">			}		</div><div class="line">			pastTime = MyTimer.pastTime;</div><div class="line">			<span class="keyword">if</span>( i &lt; offset.length ){</div><div class="line">				<span class="comment">//允许前后10ms的误差</span></div><div class="line">				<span class="comment">//InitOffset为从开始放置Note的屏幕右端移动到屏幕左端</span></div><div class="line">				指定位置的时间。根据移动速度不同而不同</div><div class="line">				<span class="keyword">if</span>(pastTime - offset[i] + InitOffset  &gt; -<span class="number">10</span> && </div><div class="line">					pastTime - offset[i] + InitOffset &lt; <span class="number">10</span>){</div><div class="line">					noteList.add(<span class="keyword">new</span> Notes(<span class="number">1023</span>,types[i]));    </div><div class="line">					<span class="comment">//添加Note，已添加的offset出队</span></div><div class="line">					i++;</div><div class="line">				}</div><div class="line">			}</div><div class="line">		}</div><div class="line">	}	</div><div class="line">});		</div><div class="line">		</div><div class="line"><span class="comment">//用于移动Note的线程		</span></div><div class="line">Thread moveThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable(){</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(){</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>){</div><div class="line">			<span class="keyword">try</span> {</div><div class="line">				Thread.sleep(<span class="number">5</span>);</div><div class="line">			} <span class="keyword">catch</span> (InterruptedException e) {</div><div class="line">				e.printStackTrace();</div><div class="line">			}			    	</div><div class="line">			pastTime = MyTimer.pastTime;</div><div class="line">			<span class="keyword">if</span>(pastTime - offset[<span class="number">0</span>] + InitOffset &gt; <span class="number">0</span>){</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; noteList.size();i++){</div><div class="line">					noteList.get(i).x -= speed;</div><div class="line">					<span class="comment">//到达左侧指定点移除,并记为miss</span></div><div class="line">					<span class="keyword">if</span>(noteList.get(i).x &lt; <span class="number">181</span>){</div><div class="line">						noteList.remove(i);</div><div class="line">						i--;</div><div class="line">						miss();</div><div class="line">					}</div><div class="line">				}</div><div class="line">				repaint();</div><div class="line">			}</div><div class="line">		}</div><div class="line">	}</div><div class="line">});</div><div class="line">			</div><div class="line">addThread.start();</div><div class="line">moveThread.start();</div></pre></td></tr></table></figure>

<h4 id="线程间的关系">线程间的关系</h4>
<p>最后再分析一下这三个线程之间的关系。</p>
<ul>
<li><p><code>clock</code>线程：负责计时，不断修改<code>pastTime</code>这一变量</p>
</li>
<li><p><code>addThrea</code>线程：负责添加Note，读<code>pastTime</code>变量，但是不做修改，在<code>noteList</code>的末尾添加Note对象</p>
</li>
<li><p><code>moveThread</code>线程：负责移动所有Note，读<code>pastTime</code>变量，但是不做修改，在<code>noteList</code>的头部删除Note对象</p>
</li>
</ul>
<p>可以看到，<code>addThread</code>和<code>moveThread</code>都要修改<code>noteList</code>，且<code>addThread</code>向<code>noteList</code>中添加Note对象使<code>noteList</code>非空后，<code>moveThread</code>才能对其进行修改，否则就会出错。可见它们是需要<strong>同步</strong>的。好在对<code>noteList</code>的操作是根据<code>pastTime</code>的值进行的，<code>clock</code>线程起到了类似时钟信号的作用。通过时间控制保证了总是先添加，后删除。</p>
<h2 id="小结">小结</h2>
<p>制作太鼓达人时的一些关键点和遇到的问题大概就是这样。实现了游戏的基本玩法，作为一个游戏来说并不完整，并未完成选歌、游戏结束评分、返回再进行新的的游戏的完整流程。但作为实践来说，使我对线程的使用、数据结构的选择等有了初步的认识。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>前言</p>
<p>出于对音乐类游戏的爱好，从大学正式学习编程开始，我就陆陆续续地尝试用当时学到的知识把自己接触过的一些音乐类游戏给实现出来。</p>
<p>从大一开始，整个大学期间我试着做过太鼓达人、O2JAM（劲乐团）、Catch The Beat还有Jubeat（乐动魔方）。刚开始时做的东西比较简陋，只是简单地实现了游戏的玩法，后来随着开始使用游戏引擎以及经验、知识的增加，做的游戏也开始完善起来。在此就写几篇文章作为记录和总结。</p>
</blockquote>
<p><!-- more --></p>
<h1 id="太鼓达人与Java">太鼓达人与Java</h1>
<p>制作太鼓达人的时候是在大一，当时只学习了基础的C语言和Java。所以它是使用Java的Swing与AWT制作的图形界面。</p>
<p>实现的功能有以下这些：</p>
<ol>
<li>游戏开始同时播放背景音乐；</li>
<li>从磁盘上的文件中读取设定好的鼓点的时间和鼓点的颜色（红或蓝）；</li>
<li>按照从文件中读取的时间和颜色在最右端加入鼓点，并使之向左滚动到指定位置；</li>
<li>当鼓点到达指定位置时需按键盘上的对应按键（D、K为蓝色，F、J为红色）进行打击；</li>
<li>当按下对应按键时发出对应音效；</li>
<li>根据打击时鼓点相对指定位置进行判定，显示“不可” “可” “良”，若超过指定位置一定距离不打击同样判定为“不可”；</li>
<li>打击时记录分数和连击数以及最大连击数；</li>
<li>出现“不可”连击重新从0开始记录；</li>
<li>连击数达到50、100、200 、300、400……时播放相应音效。</li>
</ol>
<p>下面是一段效果演示的视频：</p>
<embed width="675" height="400" type="application/x-shockwave-flash" src="http://www.56.com/flashApp/player_open.14.06.10.a.swf?vid=MTM0OTgzNDUw" rel="external nofollow" wmode="transparent" invokeurls="false" allowfullscreen="true" allowscriptaccess="never" allownetworking="internal" flashvars="tgid=1030_qq-enuotxduoy&loading_deco_version=off&ban_ad=on&ban_top_panel=on&ban_share_btn=on&ban_over_panel=on">

<p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[用Hexo在Github和Gitcafe上搭建博客]]></title>
    <link href="http://yoursite.com/2015/01/21/Build_your_blog_with_%20hexo/"/>
    <id>http://yoursite.com/2015/01/21/Build_your_blog_with_ hexo/</id>
    <published>2015-01-21T04:41:44.000Z</published>
    <updated>2015-01-29T15:47:47.073Z</updated>
    <content type="html"><![CDATA[<a id="more"></a>

<h2 id="什么是Hexo">什么是Hexo</h2>
<p>Hexo是一款开源的博客程序，它可以生成静态的博客页面。详见它的官网<a href="hexo.io">hexo.io</a></p>
<h2 id="为什么选择Hexo">为什么选择Hexo</h2>
<p>选择Hexo的原因主要有以下几点：</p>
<ol>
<li><p>简单易用。安装完Hexo后，通过几句命令就可以完成一个博客从无到有再发布至网上的全部过程。</p>
</li>
<li><p>管理方便。Hexo根据本地文件目录下的<code>.md</code>文件生成博文的静态页面，因此可以使用本地的Markdown编辑器来编辑博文，并利用本地的文件系统来管理，修改完成后只需一句命令就可以更新（重新生成）整个网站，十分灵活方便。</p>
</li>
<li><p>支持同时将博客发布至Github和Gitcafe（只需要简单地修改Hexo的配置文件即可）。再利用自己购买的域名和DNSPOD进行分流，可以使国内外都有比较理想的访问速度。</p>
</li>
<li><p>主题丰富，可以自由定制。想节省时间的话，Hexo上已有不少主题，许多是国人制作的，直接使用便有不错的页面效果和访问速度。如果比较熟悉前端技术，有时间也喜欢折腾，还可以自己定制主题。</p>
</li>
</ol>
<a id="more"></a>

<h2 id="使用Hexo需要哪些基础">使用Hexo需要哪些基础</h2>
<p>使用Hexo至少需要掌握以下的几点：</p>
<ol>
<li><p>Git的基本操作</p>
</li>
<li><p>Github或Gitcafe之类的使用（利用Github pages和Gitcafe pages服务）</p>
</li>
<li><p>Markdown标记语言的使用</p>
</li>
</ol>
<p>此外，Hexo需要NodeJS的支持，要安装许多相关的东西，且其安装和使用基本是通过命令完成的，需要有相关基础。</p>
<h2 id="安装Hexo">安装Hexo</h2>
<p>各个系统安装方法略有差别（Git和NodeJS的安装方面），详细可见<a href="hexo.io">官网</a>。我是在Ubuntu 12.04LTS中进行安装的，按照官网的步骤遇到了一些问题。下面就以此为例来详细讲一下Hexo的安装。</p>
<h3 id="安装Git">安装Git</h3>
<p>执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> apt-get install git-core</div></pre></td></tr></table></figure>

<h3 id="安装NodeJS">安装NodeJS</h3>
<p>官网建议通过 <code>nvm</code> 进行安装，并提供了两种方式：<br>第一种：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure>

<p>第二种：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure>

<p>此处，第一种方式可能会提示没有安装<code>curl</code>，需要执行<code>$ sudo apt-get install curl</code>进行安装。若两种方式都没有成功，可以采用如下的方式直接从github克隆到本地：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/creationix/nvm.git</div></pre></td></tr></table></figure>

<p><strong>接下来就是官网没有提及的部分</strong>。到这一步以后，官网让重启terminal，然后执行<code>$ nvm install 0.10</code>。这时，我遇到了问题，如下图：</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/hexo1.jpg" alt="错误"></p>
<p><strong>解决的方法如下</strong>，执行<code>$ source ~/.nvm/nvm.sh</code>后<code>nvm</code>命令就可用了。但这样是不够的，重启terminal后，还会出现同样的问题。我们需要在<code>~/.bashrc</code>, <code>~/.bash_profile</code>, <code>~/.profile</code>, 或者 <code>~/.zshrc</code>之一的文件中添加刚才的命令，这样在终端启动时就会自动执行刚才的命令。</p>
<p>接下来利用<code>nvm</code>安装NodeJS，执行如下命令，安装0.10版的NodeJS（最新稳定版本）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm install <span class="number">0.10</span></div></pre></td></tr></table></figure>

<p>考虑到国内网络环境，可以执行如下命令代替（改为从国内的镜像源下载）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/dist nvm install <span class="number">0.10</span></div></pre></td></tr></table></figure>

<p>然后就可以看到一段进度条，最后提示<code>Now using node v0.10</code>，安装成功。</p>
<p>和刚才一样，如果不想每次重启终端都输入环境变量 <code>NVM_NODEJS_ORG_MIRROR</code>，且再指定使用的NodeJS的版本。可以也将其加入到<code>.bashrc</code>文件中，和之前安装<code>nvm</code>时加入的命令一起，它们应该是如下这样：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># nvm</span></div><div class="line"><span class="keyword">export</span> NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/dist</div><div class="line"><span class="built_in">source</span> ~/.nvm/nvm.sh</div><div class="line">nvm use <span class="number">0.10</span></div></pre></td></tr></table></figure>

<h3 id="安装Hexo-1">安装Hexo</h3>
<p>执行如下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo</div></pre></td></tr></table></figure>

<p>由于国内网络环境原因，很可能会报错。可以尝试如下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm --registry=https://registry.npm.taobao.org install -g hexo</div></pre></td></tr></table></figure>

<p>如果成功，至此就完成了Hexo的安装。可以重启终端后执行<code>$ hexo</code>确认一下有没有问题。</p>
<h2 id="使用Hexo生成博客并发布">使用Hexo生成博客并发布</h2>
<p>在<code>Home</code>下新建一个目录<code>Blog</code>，然后打开终端，执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> Blog</div><div class="line">$ hexo init</div><div class="line">$ npm install</div></pre></td></tr></table></figure>

<p>然后你可以发现你的Blog目录下有东西了。找到<code>_config.yml</code>，用自己惯用的文本编辑器打开。找到其中的<code>deploy</code>部分。因为我们要同时部署到Github和Gitcafe上，请按如下格式将<code>deploy</code>部分填写完整后保存。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  message: ‘’</div><div class="line">  repo:</div><div class="line">    github: <span class="tag">&lt;<span class="title">repository</span> <span class="attribute">url</span>&gt;</span>,master</div><div class="line">    gitcafe: <span class="tag">&lt;<span class="title">repository</span> <span class="attribute">url</span>&gt;</span>,gitcafe-pages</div></pre></td></tr></table></figure>

<p>其中<code>&lt;repository url&gt;</code>部分可以有两种写法，<br>第一种</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http<span class="variable">s:</span>//github.<span class="keyword">com</span>/username/username.github.io.git</div></pre></td></tr></table></figure>

<p>第二种</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git<span class="variable">@github</span>.<span class="symbol">com:</span>username/username.github.io.git</div></pre></td></tr></table></figure>

<p>完成这一步以后，回到终端，执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy -g</div></pre></td></tr></table></figure>

<p>完成后在浏览器中查看你的Github pages，Gitcafe pages，如果之前的步骤一切顺利，你可以发现博客已经成功发布了。</p>
<h3 id="关于Windows系统下安装：">关于Windows系统下安装：</h3>
<p>我在 Windows8 系统上尝试安装过，开始一切正常。但最后执行 <code>$ hexo deploy</code>的时候总是像下面一样报错。</p>
<p><img src="http://7u2ro1.com1.z0.glb.clouddn.com/hexo2.jpg" alt="效果图1"></p>
<p>网上查了很久，基本是说没有在 git bash 中操作或者是 Git 环境变量没有配置好。可惜我不属于这两种情况。暂时没有找到解决方案。</p>
]]></content>
    <summary type="html">
    <![CDATA[<!-- more -->

<h2 id="什么是Hexo">什么是Hexo</h2>
<p>Hexo是一款开源的博客程序，它可以生成静态的博客页面。详见它的官网<a href="hexo.io">hexo.io</a></p>
<h2 id="为什么选择Hexo">为什么选择Hexo</h2>
<p>选择Hexo的原因主要有以下几点：</p>
<ol>
<li><p>简单易用。安装完Hexo后，通过几句命令就可以完成一个博客从无到有再发布至网上的全部过程。</p>
</li>
<li><p>管理方便。Hexo根据本地文件目录下的<code>.md</code>文件生成博文的静态页面，因此可以使用本地的Markdown编辑器来编辑博文，并利用本地的文件系统来管理，修改完成后只需一句命令就可以更新（重新生成）整个网站，十分灵活方便。</p>
</li>
<li><p>支持同时将博客发布至Github和Gitcafe（只需要简单地修改Hexo的配置文件即可）。再利用自己购买的域名和DNSPOD进行分流，可以使国内外都有比较理想的访问速度。</p>
</li>
<li><p>主题丰富，可以自由定制。想节省时间的话，Hexo上已有不少主题，许多是国人制作的，直接使用便有不错的页面效果和访问速度。如果比较熟悉前端技术，有时间也喜欢折腾，还可以自己定制主题。</p>
</li>
</ol>
]]>
    
    </summary>
    
  </entry>
  
</feed>
